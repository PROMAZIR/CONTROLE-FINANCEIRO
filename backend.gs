/**
 * ========================================
 * STARKTECH - SISTEMA DE CREDI√ÅRIO LIMPO
 * Vers√£o Simplificada e Funcional
 * ========================================
 */

// Configura√ß√µes globais
const CONFIG = {
  SPREADSHEET_ID: '1RAd3dzwJqaye8Czfv6-BhbFrh_dgvJKZMgc_K6v1-EU',
  SHEETS: {
    CLIENTS: 'Clientes',
    CREDITS: 'Compras', 
    INSTALLMENTS: 'Parcelas',
    PAYMENTS: 'Pagamentos'
  },
  ADMIN: {
    user: 'admin',
    password: 'cf@stark2025'
  }
};

/**
 * ========================================
 * FUN√á√ïES B√ÅSICAS DO SISTEMA
 * ========================================
 */

function doGet(e) {
  const output = HtmlService.createHtmlOutputFromFile('index');
  
  // Permitir iframe de qualquer origem
  output.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  
  // Configura√ß√µes adicionais de seguran√ßa
  output.addMetaTag('viewport', 'width=device-width, initial-scale=1');
  
  return output;
}

function doPost(e) {
  // Se voc√™ usa POST requests
  const output = ContentService.createTextOutput('Success');
  output.setMimeType(ContentService.MimeType.JSON);
  return output;
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function getOrCreateSpreadsheet() {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    console.log('‚úÖ Planilha acessada:', spreadsheet.getName());
    return spreadsheet;
  } catch (error) {
    console.error('‚ùå Erro ao acessar planilha:', error);
    throw new Error(`Planilha n√£o encontrada. ID: ${CONFIG.SPREADSHEET_ID}`);
  }
}

function generateId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

function formatDate(date) {
  if (!date) return '';
  const d = new Date(date);
  return d.toISOString().split('T')[0];
}

/**
 * ========================================
 * SISTEMA DE AUTENTICA√á√ÉO
 * ========================================
 */

function handleLogin(credentials) {
  try {
    console.log('üîê Login iniciado:', credentials.userType);
    
    const { userType, identifier, password, user } = credentials;
    
    if (userType === 'admin') {
      if (user === CONFIG.ADMIN.user && password === CONFIG.ADMIN.password) {
        return {
          success: true,
          userType: 'admin',
          userData: { name: 'Administrador', user: user }
        };
      } else {
        return { success: false, error: 'Credenciais de administrador inv√°lidas' };
      }
    } else {
      const client = findClientByIdentifier(identifier);
      
      if (!client) {
        return { success: false, error: 'CPF/CNPJ n√£o encontrado' };
      }
      
      const senhaInformada = String(password).trim();
      const senhaCadastrada = String(client.senha).trim();
      
      if (senhaCadastrada === senhaInformada) {
        return {
          success: true,
          userType: 'client',
          userData: {
            id: client.id,
            name: client.nome,
            cpf: client.cpf,
            email: client.email
          }
        };
      } else {
        return { success: false, error: 'Senha incorreta' };
      }
    }
  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}
/**
 * ========================================
 * SISTEMA DE LINKS DE PAGAMENTO NUBANK
 * StarkTech - Credi√°rio Limpo
 * ========================================
 */

/**
 * FUN√á√ÉO 1: PREPARAR PLANILHA PARA RECEBER LINKS
 * Execute esta fun√ß√£o UMA vez para criar a coluna de links
 */
function adicionarColunaLinksNubank() {
  try {
    console.log('üè¶ Preparando planilha para links do Nubank...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      console.log('‚ùå Aba Parcelas n√£o encontrada');
      return { success: false, error: 'Aba Parcelas n√£o encontrada' };
    }
    
    // Verificar estrutura atual
    const lastColumn = installmentsSheet.getLastColumn();
    const headers = installmentsSheet.getRange(1, 1, 1, lastColumn).getValues()[0];
    
    console.log('üìã Headers atuais:', headers);
    
    // Verificar se j√° existe a coluna
    if (headers.includes('Link_Pagamento_Nubank')) {
      console.log('‚úÖ Coluna Link_Pagamento_Nubank j√° existe');
      return { success: true, message: 'Coluna j√° existe' };
    }
    
    // Adicionar nova coluna
    const newColumnIndex = lastColumn + 1;
    installmentsSheet.getRange(1, newColumnIndex).setValue('Link_Pagamento_Nubank');
    
    // Formatar header
    installmentsSheet.getRange(1, newColumnIndex)
      .setBackground('#4285f4')
      .setFontColor('white')
      .setFontWeight('bold');
    
    console.log('‚úÖ Coluna Link_Pagamento_Nubank criada na posi√ß√£o:', newColumnIndex);
    
    return {
      success: true,
      message: 'Coluna Link_Pagamento_Nubank criada com sucesso!',
      columnIndex: newColumnIndex
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao criar coluna:', error);
    return { success: false, error: error.message };
  }
}

/**
 * FUN√á√ÉO 2: ADICIONAR LINK INDIVIDUAL PARA UMA PARCELA
 */
function adicionarLinkNubankParcela(creditId, numeroParcela, linkNubank) {
  try {
    console.log('üîó Adicionando link Nubank:', {
      creditId: creditId,
      parcela: numeroParcela,
      link: linkNubank
    });
    
    // Valida√ß√µes
    if (!creditId || String(creditId).trim() === '') {
      return { success: false, error: 'ID do credi√°rio √© obrigat√≥rio' };
    }
    
    if (!numeroParcela || isNaN(numeroParcela) || numeroParcela < 1) {
      return { success: false, error: 'N√∫mero da parcela deve ser v√°lido (maior que 0)' };
    }
    
    if (!linkNubank || !String(linkNubank).includes('checkout.nubank.com.br')) {
      return { success: false, error: 'Link deve ser um checkout v√°lido do Nubank' };
    }
    
    const cleanCreditId = String(creditId).trim();
    const cleanParcela = parseInt(numeroParcela);
    const cleanLink = String(linkNubank).trim();
    
    // Garantir que a coluna existe
    const colunaResult = adicionarColunaLinksNubank();
    if (!colunaResult.success && !colunaResult.message.includes('j√° existe')) {
      return colunaResult;
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    const data = installmentsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Encontrar coluna do link
    const linkColumnIndex = headers.indexOf('Link_Pagamento_Nubank');
    
    if (linkColumnIndex === -1) {
      return { success: false, error: 'Coluna Link_Pagamento_Nubank n√£o encontrada' };
    }
    
    // Buscar a parcela espec√≠fica
    let parcelaEncontrada = false;
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCreditId = String(row[1] || '').trim(); // Coluna B = Credit_ID
      const rowParcela = parseInt(row[2] || 0); // Coluna C = Numero_Parcela
      
      if (rowCreditId === cleanCreditId && rowParcela === cleanParcela) {
        // Atualizar o link
        installmentsSheet.getRange(i + 1, linkColumnIndex + 1).setValue(cleanLink);
        parcelaEncontrada = true;
        
        console.log(`‚úÖ Link adicionado: Linha ${i + 1}, Coluna ${linkColumnIndex + 1}`);
        
        return {
          success: true,
          message: `Link Nubank adicionado para parcela ${cleanParcela} do credi√°rio ${cleanCreditId}`,
          creditId: cleanCreditId,
          parcela: cleanParcela,
          link: cleanLink,
          linha: i + 1
        };
      }
    }
    
    if (!parcelaEncontrada) {
      // Mostrar parcelas dispon√≠veis para debug
      console.log('‚ùå Parcela n√£o encontrada. Parcelas dispon√≠veis:');
      
      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const rowCreditId = String(row[1] || '').trim();
        
        if (rowCreditId === cleanCreditId) {
          console.log(`  üìã Parcela ${row[2]} - Valor: R$ ${row[3]} - Vencimento: ${row[4]}`);
        }
      }
      
      return {
        success: false,
        error: `Parcela ${cleanParcela} n√£o encontrada para o credi√°rio ${cleanCreditId}`
      };
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao adicionar link:', error);
    return { success: false, error: error.message };
  }
}

/**
 * FUN√á√ÉO 3: ADICIONAR M√öLTIPLOS LINKS PARA UM CREDI√ÅRIO
 */
function adicionarLinksNubankCredito(creditId, linksArray) {
  try {
    console.log('üì¶ Adicionando m√∫ltiplos links Nubank:', {
      creditId: creditId,
      totalLinks: linksArray ? linksArray.length : 0
    });
    
    if (!creditId) {
      return { success: false, error: 'ID do credi√°rio √© obrigat√≥rio' };
    }
    
    if (!Array.isArray(linksArray) || linksArray.length === 0) {
      return { success: false, error: 'Array de links √© obrigat√≥rio' };
    }
    
    const resultados = [];
    let sucessos = 0;
    let erros = 0;
    
    for (let i = 0; i < linksArray.length; i++) {
      const numeroParcela = i + 1;
      const link = linksArray[i];
      
      if (link && String(link).trim() !== '') {
        const resultado = adicionarLinkNubankParcela(creditId, numeroParcela, link);
        
        resultados.push({
          parcela: numeroParcela,
          link: link,
          success: resultado.success,
          message: resultado.message || resultado.error
        });
        
        if (resultado.success) {
          sucessos++;
          console.log(`‚úÖ Parcela ${numeroParcela}: Link adicionado`);
        } else {
          erros++;
          console.log(`‚ùå Parcela ${numeroParcela}: ${resultado.error}`);
        }
      } else {
        console.log(`‚è≠Ô∏è Parcela ${numeroParcela}: Link vazio, pulando`);
      }
    }
    
    return {
      success: sucessos > 0,
      message: `${sucessos} links adicionados, ${erros} erros`,
      sucessos: sucessos,
      erros: erros,
      resultados: resultados
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao adicionar links em lote:', error);
    return { success: false, error: error.message };
  }
}

/**
 * FUN√á√ÉO 4: LISTAR TODOS OS CREDI√ÅRIOS E SUAS PARCELAS
 */
function listarCreditosParaLinks() {
  try {
    console.log('üìã Listando credi√°rios dispon√≠veis para adicionar links...');
    
    const creditsResult = getCredits();
    
    if (!creditsResult.success) {
      return { success: false, error: 'Erro ao carregar credi√°rios' };
    }
    
    const creditosInfo = [];
    
    creditsResult.credits.forEach(credit => {
      const parcelas = credit.installments || [];
      
      creditosInfo.push({
        creditId: credit.id,
        cliente: credit.clientName,
        produto: credit.productName,
        valorTotal: credit.totalValue,
        totalParcelas: parcelas.length,
        parcelas: parcelas.map(p => ({
          numero: p.number,
          valor: p.value,
          vencimento: p.dueDate,
          status: p.status
        }))
      });
      
      console.log(`üìã ${credit.productName} (${credit.clientName})`);
      console.log(`   ID: ${credit.id}`);
      console.log(`   Parcelas: ${parcelas.length}`);
      console.log(`   Valor Total: R$ ${credit.totalValue}`);
      console.log('');
    });
    
    return {
      success: true,
      creditos: creditosInfo,
      message: `${creditosInfo.length} credi√°rios encontrados`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao listar credi√°rios:', error);
    return { success: false, error: error.message };
  }
}

/**
 * FUN√á√ÉO 5: VERIFICAR LINKS J√Å ADICIONADOS
 */
function verificarLinksExistentes(creditId = null) {
  try {
    console.log('üîç Verificando links existentes...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      return { success: false, error: 'Aba Parcelas n√£o encontrada' };
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    const headers = data[0];
    const linkColumnIndex = headers.indexOf('Link_Pagamento_Nubank');
    
    if (linkColumnIndex === -1) {
      console.log('‚ö†Ô∏è Coluna Link_Pagamento_Nubank n√£o existe');
      return {
        success: true,
        message: 'Coluna de links n√£o existe ainda',
        parcelas: []
      };
    }
    
    const parcelasComLink = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCreditId = String(row[1] || '').trim();
      const link = row[linkColumnIndex];
      
      // Filtrar por credi√°rio espec√≠fico se fornecido
      if (creditId && rowCreditId !== creditId) {
        continue;
      }
      
      if (link && String(link).trim() !== '') {
        parcelasComLink.push({
          creditId: rowCreditId,
          parcela: parseInt(row[2] || 0),
          valor: row[3],
          vencimento: row[4],
          link: String(link).trim(),
          linha: i + 1
        });
      }
    }
    
    console.log(`üìä ${parcelasComLink.length} parcelas com links encontradas`);
    
    if (creditId) {
      console.log(`üéØ Filtrado para credi√°rio: ${creditId}`);
    }
    
    parcelasComLink.forEach(p => {
      console.log(`  üìã ${p.creditId} - Parcela ${p.parcela}: ${p.link}`);
    });
    
    return {
      success: true,
      parcelas: parcelasComLink,
      message: `${parcelasComLink.length} parcelas com links`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar links:', error);
    return { success: false, error: error.message };
  }
}

/**
 * FUN√á√ÉO 6: ATUALIZAR A FUN√á√ÉO getPaymentUrlByProduct PARA USAR OS NOVOS LINKS
 */
function getPaymentUrlNubank(creditId, installmentNumber) {
  console.log('üè¶ Buscando URL Nubank:', { creditId, installmentNumber });
  
  try {
    if (!creditId || !installmentNumber) {
      console.log('‚ö†Ô∏è Par√¢metros inv√°lidos');
      return 'https://checkout.nubank.com.br/QuKX2aKfp5azqxv'; // Link padr√£o
    }
    
    const cleanCreditId = String(creditId).trim();
    const cleanInstallmentNumber = parseInt(installmentNumber);
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      console.log('‚ö†Ô∏è Aba Parcelas n√£o encontrada');
      return 'https://checkout.nubank.com.br/QuKX2aKfp5azqxv';
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    const headers = data[0];
    const linkColumnIndex = headers.indexOf('Link_Pagamento_Nubank');
    
    if (linkColumnIndex === -1) {
      console.log('‚ö†Ô∏è Coluna Link_Pagamento_Nubank n√£o existe');
      return 'https://checkout.nubank.com.br/QuKX2aKfp5azqxv';
    }
    
    // Buscar o link espec√≠fico
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCreditId = String(row[1] || '').trim();
      const rowInstallmentNumber = parseInt(row[2] || 0);
      
      if (rowCreditId === cleanCreditId && rowInstallmentNumber === cleanInstallmentNumber) {
        const linkNubank = row[linkColumnIndex];
        
        if (linkNubank && String(linkNubank).trim() !== '') {
          console.log(`‚úÖ Link Nubank encontrado: ${linkNubank}`);
          return String(linkNubank).trim();
        }
      }
    }
    
    console.log('‚ö†Ô∏è Link espec√≠fico n√£o encontrado, usando padr√£o');
    return 'https://checkout.nubank.com.br/QuKX2aKfp5azqxv';
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar URL Nubank:', error);
    return 'https://checkout.nubank.com.br/QuKX2aKfp5azqxv';
  }
}

/**
 * ========================================
 * FUN√á√ïES DE EXEMPLO E TESTE
 * ========================================
 */

function exemploUsoNubank() {
  console.log('üí° === EXEMPLO DE USO - LINKS NUBANK ===');
  
  try {
    // 1. Preparar planilha
    console.log('\nüîß 1. Preparando planilha...');
    const prep = adicionarColunaLinksNubank();
    console.log('Prepara√ß√£o:', prep.success ? '‚úÖ' : '‚ùå', prep.message);
    
    // 2. Listar credi√°rios dispon√≠veis
    console.log('\nüìã 2. Credi√°rios dispon√≠veis:');
    const creditos = listarCreditosParaLinks();
    
    if (creditos.success && creditos.creditos.length > 0) {
      const creditoExemplo = creditos.creditos[0];
      console.log(`üìã Usando credi√°rio: ${creditoExemplo.creditId} - ${creditoExemplo.produto}`);
      
      // 3. Adicionar link individual
      console.log('\nüîó 3. Adicionando link individual...');
      const linkIndividual = adicionarLinkNubankParcela(
        creditoExemplo.creditId, 
        1, 
        'https://checkout.nubank.com.br/RdrnvEY2QJazqxv'
      );
      console.log('Link individual:', linkIndividual.success ? '‚úÖ' : '‚ùå', linkIndividual.message);
      
      // 4. Adicionar m√∫ltiplos links
      console.log('\nüì¶ 4. Adicionando m√∫ltiplos links...');
      const linksExemplo = [
        'https://checkout.nubank.com.br/parcela1-exemplo',
        'https://checkout.nubank.com.br/parcela2-exemplo',
        'https://checkout.nubank.com.br/parcela3-exemplo'
      ];
      
      const linksMultiplos = adicionarLinksNubankCredito(creditoExemplo.creditId, linksExemplo);
      console.log('Links m√∫ltiplos:', linksMultiplos.success ? '‚úÖ' : '‚ùå', linksMultiplos.message);
      
      // 5. Verificar links adicionados
      console.log('\nüîç 5. Verificando links adicionados...');
      const verificacao = verificarLinksExistentes(creditoExemplo.creditId);
      console.log('Verifica√ß√£o:', verificacao.success ? '‚úÖ' : '‚ùå', verificacao.message);
      
      // 6. Testar busca de URL
      console.log('\nüîç 6. Testando busca de URL...');
      const urlEncontrada = getPaymentUrlNubank(creditoExemplo.creditId, 1);
      console.log('URL encontrada:', urlEncontrada);
    }
    
    return {
      success: true,
      message: 'Exemplo executado com sucesso! Verifique o console.'
    };
    
  } catch (error) {
    console.error('‚ùå Erro no exemplo:', error);
    return { success: false, error: error.message };
  }
}

/**
 * FUN√á√ÉO R√ÅPIDA: CONFIGURA√á√ÉO COMPLETA
 */
function configurarLinksNubankCompleto() {
  console.log('‚ö° === CONFIGURA√á√ÉO COMPLETA NUBANK ===');
  
  try {
    // 1. Preparar planilha
    const prep = adicionarColunaLinksNubank();
    console.log('1. Planilha:', prep.success ? '‚úÖ' : '‚ùå');
    
    // 2. Listar credi√°rios
    const creditos = listarCreditosParaLinks();
    console.log('2. Credi√°rios:', creditos.success ? '‚úÖ' : '‚ùå');
    
    if (creditos.success) {
      console.log(`üìä Total de credi√°rios: ${creditos.creditos.length}`);
      
      creditos.creditos.forEach(credito => {
        console.log(`üìã ${credito.produto} (${credito.cliente})`);
        console.log(`   ID: ${credito.creditId}`);
        console.log(`   Parcelas: ${credito.totalParcelas}`);
        console.log(`   üí° Para adicionar links:`);
        console.log(`   adicionarLinkNubankParcela('${credito.creditId}', 1, 'https://checkout.nubank.com.br/SEU_LINK')`);
        console.log('');
      });
    }
    
    // 3. Verificar links existentes
    const existentes = verificarLinksExistentes();
    console.log('3. Links existentes:', existentes.success ? '‚úÖ' : '‚ùå');
    
    return {
      success: true,
      message: 'Sistema configurado e pronto para uso!'
    };
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * GUIA DE USO PR√ÅTICO
 * ========================================
 */

/*
üè¶ GUIA COMPLETO - LINKS DE PAGAMENTO NUBANK

üöÄ PASSO A PASSO:

1Ô∏è‚É£ PREPARA√á√ÉO INICIAL (Execute UMA vez):
   adicionarColunaLinksNubank()

2Ô∏è‚É£ VER CREDI√ÅRIOS DISPON√çVEIS:
   listarCreditosParaLinks()

3Ô∏è‚É£ ADICIONAR LINK PARA UMA PARCELA:
   adicionarLinkNubankParcela('ID_DO_CREDITO', 1, 'https://checkout.nubank.com.br/RdrnvEY2QJazqxv')

4Ô∏è‚É£ ADICIONAR V√ÅRIOS LINKS DE UMA VEZ:
   adicionarLinksNubankCredito('ID_DO_CREDITO', [
     'https://checkout.nubank.com.br/link-parcela1',
     'https://checkout.nubank.com.br/link-parcela2',
     'https://checkout.nubank.com.br/link-parcela3'
   ])

5Ô∏è‚É£ VERIFICAR LINKS J√Å ADICIONADOS:
   verificarLinksExistentes('ID_DO_CREDITO')

6Ô∏è‚É£ CONFIGURA√á√ÉO AUTOM√ÅTICA:
   configurarLinksNubankCompleto()

üéØ EXEMPLOS PR√ÅTICOS:

// Adicionar link para primeira parcela
adicionarLinkNubankParcela('abc123', 1, 'https://checkout.nubank.com.br/RdrnvEY2QJazqxv')

// Adicionar links para todas as parcelas de um credi√°rio
adicionarLinksNubankCredito('abc123', [
  'https://checkout.nubank.com.br/parcela1-abc123',
  'https://checkout.nubank.com.br/parcela2-abc123', 
  'https://checkout.nubank.com.br/parcela3-abc123',
  'https://checkout.nubank.com.br/parcela4-abc123'
])

// Ver todos os links de um credi√°rio
verificarLinksExistentes('abc123')

‚ö° CONFIGURA√á√ÉO R√ÅPIDA:
Execute: configurarLinksNubankCompleto()

üîÑ INTEGRA√á√ÉO NO SISTEMA:
No seu c√≥digo HTML, substitua:
getPaymentUrlByProduct() ‚Üí getPaymentUrlNubank()

‚úÖ O sistema vai:
- Criar coluna "Link_Pagamento_Nubank" automaticamente
- Validar se os links s√£o do Nubank
- Mostrar logs detalhados de cada opera√ß√£o
- Permitir verificar links j√° adicionados
- Buscar o link correto para cada parcela

üéØ RESULTADO:
Cada parcela ter√° seu link espec√≠fico do Nubank na planilha,
e o sistema usar√° automaticamente o link correto para pagamentos!
*/

/**
 * PASSO 3: DEFINIR LINKS EM LOTE PARA UM CREDI√ÅRIO
 * Define links para todas as parcelas de um credi√°rio de uma vez
 */
function definirLinksCredito(creditId, linksArray) {
  try {
    console.log('üì¶ Definindo links em lote para credi√°rio:', creditId);
    console.log('üîó Links recebidos:', linksArray);
    
    if (!creditId || !Array.isArray(linksArray)) {
      return { success: false, error: 'CreditId e array de links s√£o obrigat√≥rios' };
    }
    
    const results = [];
    
    for (let i = 0; i < linksArray.length; i++) {
      const installmentNumber = i + 1;
      const paymentUrl = linksArray[i];
      
      if (paymentUrl && paymentUrl.trim() !== '') {
        const result = definirLinkParcela(creditId, installmentNumber, paymentUrl.trim());
        results.push({
          parcela: installmentNumber,
          success: result.success,
          message: result.message || result.error
        });
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    
    return {
      success: successCount > 0,
      message: `${successCount} links definidos com sucesso`,
      results: results
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao definir links em lote:', error);
    return { success: false, error: error.message };
  }
}

/**
 * PASSO 4: LISTAR PARCELAS COM SEUS LINKS
 * Mostra todas as parcelas de um credi√°rio e seus links
 */
function listarParcelasComLinks(creditId) {
  try {
    console.log('üìã Listando parcelas com links para:', creditId);
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    
    if (!installmentsSheet || !creditsSheet) {
      return { success: false, error: 'Planilhas n√£o encontradas' };
    }
    
    // Buscar informa√ß√µes do credi√°rio
    const creditsData = creditsSheet.getDataRange().getValues();
    let creditInfo = null;
    
    for (let i = 1; i < creditsData.length; i++) {
      if (creditsData[i][0] === creditId) {
        creditInfo = {
          id: creditsData[i][0],
          clientName: creditsData[i][2],
          productName: creditsData[i][3],
          totalValue: creditsData[i][6]
        };
        break;
      }
    }
    
    if (!creditInfo) {
      return { success: false, error: 'Credi√°rio n√£o encontrado' };
    }
    
    // Buscar parcelas
    const installmentsData = installmentsSheet.getDataRange().getValues();
    const headers = installmentsData[0];
    const linkColumnIndex = headers.indexOf('Link_Pagamento');
    
    const parcelas = [];
    
    for (let i = 1; i < installmentsData.length; i++) {
      const row = installmentsData[i];
      
      if (row[1] === creditId) {
        parcelas.push({
          numero: row[2],
          valor: row[3],
          vencimento: formatDate(row[4]),
          status: row[5],
          linkPagamento: linkColumnIndex !== -1 ? row[linkColumnIndex] || '' : '',
          temLink: linkColumnIndex !== -1 && row[linkColumnIndex] && String(row[linkColumnIndex]).trim() !== ''
        });
      }
    }
    
    parcelas.sort((a, b) => a.numero - b.numero);
    
    return {
      success: true,
      creditInfo: creditInfo,
      parcelas: parcelas,
      message: `${parcelas.length} parcelas encontradas`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao listar parcelas:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * FUN√á√ÉO DE LOGIN MELHORADA - SUPORTE A EMAIL
 * ========================================
 */

function findClientByIdentifier(identifier) {
  try {
    console.log('üîç Buscando cliente por identificador:', identifier);
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    
    if (!sheet) {
      console.log('‚ùå Aba Clientes n√£o encontrada');
      return null;
    }
    
    const data = sheet.getDataRange().getValues();
    console.log('üìä Total de linhas na planilha:', data.length);
    
    const cleanIdentifier = String(identifier).trim();
    const numbersOnly = cleanIdentifier.replace(/\D/g, '');
    const emailSearch = cleanIdentifier.toLowerCase().trim();
    
    console.log('üîç Procurando por:', {
      original: identifier,
      clean: cleanIdentifier,
      numbersOnly: numbersOnly,
      emailSearch: emailSearch
    });
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Pular linhas vazias
      if (!row[0] || !row[1]) {
        console.log(`‚è≠Ô∏è Pulando linha ${i} (vazia)`);
        continue;
      }
      
      const id = String(row[0] || '').trim();
      const nome = String(row[1] || '').trim();
      const cpf = String(row[2] || '').trim();
      const email = String(row[3] || '').trim();
      const telefone = String(row[4] || '').trim();
      const senha = String(row[5] || '').trim();
      
      console.log(`üîç Linha ${i}:`, {
        id: id,
        nome: nome,
        cpf: cpf,
        email: email,
        senha: senha ? '***' : '(vazia)'
      });
      
      // Preparar dados para compara√ß√£o
      const cpfNumbers = cpf.replace(/\D/g, '');
      const emailClean = email.toLowerCase().trim();
      
      // Verificar correspond√™ncias
      const matchCpfFormatted = cpf === cleanIdentifier;
      const matchCpfNumbers = cpfNumbers === numbersOnly && numbersOnly.length >= 11;
      const matchEmail = emailClean === emailSearch && emailClean.length > 0;
      
      console.log(`üéØ Compara√ß√µes linha ${i}:`, {
        cpfFormatted: `"${cpf}" === "${cleanIdentifier}" = ${matchCpfFormatted}`,
        cpfNumbers: `"${cpfNumbers}" === "${numbersOnly}" = ${matchCpfNumbers}`,
        email: `"${emailClean}" === "${emailSearch}" = ${matchEmail}`
      });
      
      if (matchCpfFormatted || matchCpfNumbers || matchEmail) {
        console.log('‚úÖ Cliente encontrado!', {
          matchType: matchEmail ? 'EMAIL' : 'CPF',
          cliente: nome
        });
        
        return {
          id: id,
          nome: nome,
          cpf: cpf,
          email: email,
          telefone: telefone,
          senha: senha,
          dataCadastro: row[6]
        };
      }
    }
    
    console.log('‚ùå Cliente n√£o encontrado para:', identifier);
    return null;
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar cliente:', error);
    return null;
  }
}

/**
 * ========================================
 * FUN√á√ÉO DE LOGIN MELHORADA
 * ========================================
 */

function handleLogin(credentials) {
  try {
    console.log('üîê === IN√çCIO DO LOGIN ===');
    console.log('üìù Credenciais recebidas:', {
      userType: credentials.userType,
      identifier: credentials.identifier ? `${credentials.identifier.substring(0, 3)}***` : '(vazio)',
      hasPassword: !!credentials.password
    });
    
    const { userType, identifier, password, user } = credentials;
    
    if (userType === 'admin') {
      console.log('üë§ Login de administrador');
      
      if (user === CONFIG.ADMIN.user && password === CONFIG.ADMIN.password) {
        console.log('‚úÖ Admin autenticado com sucesso');
        return {
          success: true,
          userType: 'admin',
          userData: { name: 'Administrador', user: user }
        };
      } else {
        console.log('‚ùå Credenciais de admin inv√°lidas');
        return { success: false, error: 'Credenciais de administrador inv√°lidas' };
      }
    } 
    
    else if (userType === 'client') {
      console.log('üë§ Login de cliente');
      
      // Validar entrada
      if (!identifier || !password) {
        console.log('‚ùå Dados obrigat√≥rios n√£o informados');
        return { success: false, error: 'CPF/CNPJ/Email e senha s√£o obrigat√≥rios' };
      }
      
      // Buscar cliente
      const client = findClientByIdentifier(identifier);
      
      if (!client) {
        console.log('‚ùå Cliente n√£o encontrado');
        return { success: false, error: 'CPF/CNPJ ou Email n√£o encontrado' };
      }
      
      console.log('‚úÖ Cliente encontrado:', client.nome);
      
      // Verificar senha
      const senhaInformada = String(password).trim();
      const senhaCadastrada = String(client.senha).trim();
      
      console.log('üîê Verificando senha:', {
        informada: senhaInformada ? `${senhaInformada.substring(0, 2)}***` : '(vazia)',
        cadastrada: senhaCadastrada ? `${senhaCadastrada.substring(0, 2)}***` : '(vazia)',
        match: senhaCadastrada === senhaInformada
      });
      
      if (senhaCadastrada === senhaInformada) {
        console.log('‚úÖ Senha correta - Login autorizado');
        return {
          success: true,
          userType: 'client',
          userData: {
            id: client.id,
            name: client.nome,
            cpf: client.cpf,
            email: client.email
          }
        };
      } else {
        console.log('‚ùå Senha incorreta');
        return { success: false, error: 'Senha incorreta' };
      }
    }
    
    else {
      console.log('‚ùå Tipo de usu√°rio inv√°lido');
      return { success: false, error: 'Tipo de usu√°rio inv√°lido' };
    }
    
  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error);
    return { success: false, error: 'Erro interno do servidor: ' + error.message };
  } finally {
    console.log('üîê === FIM DO LOGIN ===');
  }
}
/**
 * ========================================
 * FUN√á√ÉO deleteClient PARA GOOGLE APPS SCRIPT
 * ========================================
 */

function deleteClient(clientId) {
  try {
    console.log('üóëÔ∏è Iniciando exclus√£o do cliente:', clientId);
    
    if (!clientId) {
      return { success: false, error: 'ID do cliente n√£o fornecido' };
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const clientsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    
    if (!clientsSheet) {
      return { success: false, error: 'Planilha de clientes n√£o encontrada' };
    }
    
    // Buscar linha do cliente
    const data = clientsSheet.getDataRange().getValues();
    let clientRow = -1;
    let clientName = '';
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === clientId) {
        clientRow = i + 1; // +1 porque getRange √© 1-indexed
        clientName = data[i][1] || 'Cliente';
        break;
      }
    }
    
    if (clientRow === -1) {
      return { success: false, error: 'Cliente n√£o encontrado' };
    }
    
    console.log('‚úÖ Cliente encontrado na linha:', clientRow);
    console.log('üë§ Nome do cliente:', clientName);
    
    // Verificar se cliente tem credi√°rios ativos
    const hasActiveCredits = checkClientHasCredits(clientId);
    
    if (hasActiveCredits) {
      return { 
        success: false, 
        error: 'Cliente possui credi√°rios ativos. Exclua os credi√°rios primeiro.' 
      };
    }
    
    // Excluir linha do cliente
    clientsSheet.deleteRow(clientRow);
    
    // Log da opera√ß√£o
    logClientDeletion(clientId, clientName);
    
    console.log('‚úÖ Cliente exclu√≠do com sucesso');
    
    return {
      success: true,
      message: `Cliente "${clientName}" exclu√≠do com sucesso`,
      clientId: clientId,
      clientName: clientName
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao excluir cliente:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * Verificar se cliente tem credi√°rios ativos
 */
function checkClientHasCredits(clientId) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    
    if (!creditsSheet) return false;
    
    const data = creditsSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === clientId) { // Cliente_ID est√° na coluna B (√≠ndice 1)
        console.log('‚ö†Ô∏è Cliente possui credi√°rio:', data[i][0]);
        return true;
      }
    }
    
    return false;
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar credi√°rios:', error);
    return false;
  }
}

/**
 * Registrar log da exclus√£o
 */
function logClientDeletion(clientId, clientName) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    let logSheet = spreadsheet.getSheetByName('Logs_Exclusoes');
    
    if (!logSheet) {
      logSheet = spreadsheet.insertSheet('Logs_Exclusoes');
      logSheet.getRange(1, 1, 1, 5).setValues([[
        'Data', 'Tipo', 'ID_Excluido', 'Nome', 'Usuario'
      ]]);
    }
    
    logSheet.appendRow([
      new Date(),
      'Cliente',
      clientId,
      clientName,
      'Admin Web'
    ]);
    
    console.log('üìù Log de exclus√£o registrado');
    
  } catch (error) {
    console.error('‚ùå Erro ao registrar log:', error);
    // N√£o falhar a opera√ß√£o principal por causa do log
  }
}

/**
 * ========================================
 * FUN√á√ÉO updateClient MELHORADA
 * ========================================
 */

function updateClient(clientId, clientData) {
  try {
    console.log('üíæ Atualizando cliente:', clientId);
    
    if (!clientId || !clientData) {
      return { success: false, error: 'Dados insuficientes para atualiza√ß√£o' };
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const clientsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    
    if (!clientsSheet) {
      return { success: false, error: 'Planilha de clientes n√£o encontrada' };
    }
    
    // Buscar linha do cliente
    const data = clientsSheet.getDataRange().getValues();
    let clientRow = -1;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === clientId) {
        clientRow = i + 1;
        break;
      }
    }
    
    if (clientRow === -1) {
      return { success: false, error: 'Cliente n√£o encontrado' };
    }
    
    // Atualizar dados
    if (clientData.name) {
      clientsSheet.getRange(clientRow, 2).setValue(clientData.name);
    }
    if (clientData.cpf) {
      clientsSheet.getRange(clientRow, 3).setValue(formatDocument(clientData.cpf));
    }
    if (clientData.email !== undefined) {
      clientsSheet.getRange(clientRow, 4).setValue(clientData.email.toLowerCase().trim());
    }
    if (clientData.phone !== undefined) {
      clientsSheet.getRange(clientRow, 5).setValue(clientData.phone);
    }
    if (clientData.password) {
      clientsSheet.getRange(clientRow, 6).setValue(clientData.password);
    }
    
    console.log('‚úÖ Cliente atualizado com sucesso');
    
    return {
      success: true,
      message: 'Cliente atualizado com sucesso',
      clientId: clientId
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar cliente:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * ========================================
 * FUN√á√ÉO PARA LISTAR CLIENTES COM CREDI√ÅRIOS
 * ========================================
 */

function getClientsWithCredits() {
  try {
    console.log('üìã Listando clientes com seus credi√°rios...');
    
    const clientsResult = getClients();
    const creditsResult = getCredits();
    
    if (!clientsResult.success || !creditsResult.success) {
      return { success: false, error: 'Erro ao carregar dados' };
    }
    
    const clients = clientsResult.clients;
    const credits = creditsResult.credits;
    
    // Adicionar informa√ß√£o de credi√°rios a cada cliente
    const clientsWithCredits = clients.map(client => ({
      ...client,
      creditsCount: credits.filter(credit => credit.clientId === client.id).length,
      hasActiveCredits: credits.some(credit => 
        credit.clientId === client.id && 
        credit.installments.some(inst => inst.status !== 'Pago')
      )
    }));
    
    return {
      success: true,
      clients: clientsWithCredits
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao listar clientes:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * FUN√á√ÉO DE TESTE DO SISTEMA DE EXCLUS√ÉO
 * ========================================
 */

function testarSistemaExclusao() {
  console.log('üß™ === TESTE DO SISTEMA DE EXCLUS√ÉO ===');
  
  try {
    // Listar clientes
    const clientsResult = getClientsWithCredits();
    
    if (clientsResult.success) {
      console.log('üìã Clientes encontrados:');
      clientsResult.clients.forEach(client => {
        console.log(`- ${client.name} (${client.id}) - Credi√°rios: ${client.creditsCount} - Ativos: ${client.hasActiveCredits ? 'Sim' : 'N√£o'}`);
      });
      
      // Encontrar cliente sem credi√°rios ativos para teste
      const clientSemCreditos = clientsResult.clients.find(c => !c.hasActiveCredits);
      
      if (clientSemCreditos) {
        console.log(`\n‚úÖ Cliente eleg√≠vel para exclus√£o encontrado: ${clientSemCreditos.name}`);
        console.log('üí° Para testar exclus√£o, execute:');
        console.log(`deleteClient('${clientSemCreditos.id}')`);
      } else {
        console.log('\n‚ö†Ô∏è Nenhum cliente eleg√≠vel para exclus√£o (todos t√™m credi√°rios ativos)');
      }
    }
    
    return {
      success: true,
      message: 'Teste conclu√≠do - verifique o console'
    };
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * FUN√á√ÉO DE TESTE DE LOGIN
 * ========================================
 */

function testarLoginPorEmail() {
  console.log('üß™ === TESTE DE LOGIN POR EMAIL ===');
  
  try {
    // Listar todos os clientes para debug
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    const data = sheet.getDataRange().getValues();
    
    console.log('üìã Clientes cadastrados:');
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[0]) {
        console.log(`${i}. ${row[1]} | CPF: ${row[2]} | Email: ${row[3]} | Senha: ${row[5] ? '***' : '(vazia)'}`);
      }
    }
    
    // Teste com emails espec√≠ficos
    const testEmails = [
      'duarte@gmail.com',
      'wanderson@email.com', 
      'maria@email.com'
    ];
    
    console.log('\nüîç Testando busca por email:');
    testEmails.forEach(email => {
      const client = findClientByIdentifier(email);
      console.log(`Email "${email}": ${client ? `‚úÖ ${client.nome}` : '‚ùå N√£o encontrado'}`);
    });
    
    return {
      success: true,
      message: 'Teste conclu√≠do - verifique o console do Apps Script'
    };
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * FUN√á√ÉO PARA CORRIGIR EMAILS EXISTENTES
 * ========================================
 */

function corrigirEmailsClientes() {
  try {
    console.log('üîß Corrigindo emails dos clientes...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    const data = sheet.getDataRange().getValues();
    
    let corrigidos = 0;
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[0] && row[3]) { // Se tem ID e email
        const emailOriginal = String(row[3]).trim();
        const emailCorrigido = emailOriginal.toLowerCase().trim();
        
        if (emailOriginal !== emailCorrigido) {
          sheet.getRange(i + 1, 4).setValue(emailCorrigido);
          console.log(`‚úÖ Email corrigido: "${emailOriginal}" ‚Üí "${emailCorrigido}"`);
          corrigidos++;
        }
      }
    }
    
    console.log(`üéâ Corre√ß√£o conclu√≠da: ${corrigidos} emails corrigidos`);
    
    return {
      success: true,
      message: `${corrigidos} emails corrigidos`,
      corrigidos: corrigidos
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir emails:', error);
    return { success: false, error: error.message };
  }
}
/**
 * ========================================
 * SISTEMA DE RECUPERA√á√ÉO DE SENHA - BACKEND
 * ========================================
 */

function recoverPassword(identifier) {
  try {
    console.log('üîë Iniciando recupera√ß√£o de senha para:', identifier);
    
    if (!identifier) {
      return { success: false, error: 'CPF/CNPJ ou email n√£o informado' };
    }
    
    // Buscar cliente
    const client = findClientByIdentifier(identifier);
    
    if (!client) {
      console.log('‚ùå Cliente n√£o encontrado para recupera√ß√£o');
      return { success: false, error: 'CPF/CNPJ ou email n√£o encontrado no sistema' };
    }
    
    console.log('‚úÖ Cliente encontrado para recupera√ß√£o:', client.nome);
    
    // Gerar nova senha aleat√≥ria
    const newPassword = generateRandomPassword();
    
    // Atualizar senha na planilha
    const updateResult = updateClientPassword(client.id, newPassword);
    
    if (!updateResult) {
      return { success: false, error: 'Erro interno ao atualizar senha' };
    }
    
    // Log da opera√ß√£o
    logPasswordRecovery(client.id, client.nome, identifier);
    
    console.log('‚úÖ Senha recuperada com sucesso');
    
    return {
      success: true,
      newPassword: newPassword,
      clientName: client.nome,
      message: 'Nova senha gerada com sucesso!'
    };
    
  } catch (error) {
    console.error('‚ùå Erro na recupera√ß√£o de senha:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

/**
 * Gera uma senha aleat√≥ria segura mas f√°cil de digitar
 */
function generateRandomPassword() {
  const options = [
    // Senhas num√©ricas simples
    () => Math.floor(100000 + Math.random() * 900000).toString(), // 6 d√≠gitos
    () => new Date().getFullYear().toString() + String(Math.floor(10 + Math.random() * 90)).padStart(2, '0'), // Ano + 2 d√≠gitos
    
    // Senhas alfanum√©ricas simples
    () => {
      const words = ['stark', 'tech', 'facil', 'novo', 'senha'];
      const word = words[Math.floor(Math.random() * words.length)];
      const number = Math.floor(10 + Math.random() * 90);
      return word + number;
    },
    
    // Padr√µes simples
    () => 'novo' + Math.floor(1000 + Math.random() * 9000),
    () => '2025' + String(Math.floor(100 + Math.random() * 900)),
  ];
  
  // Escolher um padr√£o aleat√≥rio
  const randomOption = options[Math.floor(Math.random() * options.length)];
  return randomOption();
}

/**
 * Atualiza a senha de um cliente na planilha
 */
function updateClientPassword(clientId, newPassword) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === clientId) {
        // Atualizar senha na coluna 6 (√≠ndice 5)
        sheet.getRange(i + 1, 6).setValue(newPassword);
        console.log('‚úÖ Senha atualizada na planilha');
        return true;
      }
    }
    
    console.log('‚ùå Cliente n√£o encontrado para atualiza√ß√£o');
    return false;
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar senha:', error);
    return false;
  }
}

/**
 * Registra a recupera√ß√£o de senha para auditoria
 */
function logPasswordRecovery(clientId, clientName, identifier) {
  try {
    console.log('üìù Registrando recupera√ß√£o de senha:', {
      cliente: clientName,
      identificador: identifier,
      data: new Date()
    });
    
    // Opcional: Criar uma aba de logs se necess√°rio
    const spreadsheet = getOrCreateSpreadsheet();
    let logSheet = spreadsheet.getSheetByName('Logs_Recuperacao');
    
    if (!logSheet) {
      logSheet = spreadsheet.insertSheet('Logs_Recuperacao');
      logSheet.getRange(1, 1, 1, 5).setValues([[
        'Data', 'Cliente_ID', 'Cliente_Nome', 'Identificador_Usado', 'IP/User'
      ]]);
    }
    
    logSheet.appendRow([
      new Date(),
      clientId,
      clientName,
      identifier,
      'Sistema Web'
    ]);
    
  } catch (error) {
    console.error('‚ùå Erro ao registrar log:', error);
    // N√£o falhar a opera√ß√£o principal por causa do log
  }
}

/**
 * ========================================
 * FUN√á√ïES AUXILIARES DE RECUPERA√á√ÉO
 * ========================================
 */

/**
 * Reset de senha em massa (apenas para admin)
 */
function resetAllPasswordsToDefault() {
  try {
    console.log('üîß Resetando todas as senhas para padr√£o...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    const data = sheet.getDataRange().getValues();
    
    let resetCount = 0;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0]) { // Se tem ID
        sheet.getRange(i + 1, 6).setValue('123456'); // Senha padr√£o
        resetCount++;
      }
    }
    
    console.log(`‚úÖ ${resetCount} senhas resetadas para "123456"`);
    
    return {
      success: true,
      message: `${resetCount} senhas resetadas para "123456"`,
      resetCount: resetCount
    };
    
  } catch (error) {
    console.error('‚ùå Erro no reset em massa:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Reset de senha espec√≠fica por CPF (para admin)
 */
function resetPasswordByCpf(cpf, newPassword = null) {
  try {
    console.log('üîß Resetando senha por CPF:', cpf);
    
    const client = findClientByIdentifier(cpf);
    
    if (!client) {
      return { success: false, error: 'Cliente n√£o encontrado' };
    }
    
    const passwordToSet = newPassword || '123456';
    const updateResult = updateClientPassword(client.id, passwordToSet);
    
    if (updateResult) {
      console.log(`‚úÖ Senha resetada para: ${passwordToSet}`);
      
      return {
        success: true,
        message: `Senha do cliente ${client.nome} resetada`,
        loginInfo: {
          nome: client.nome,
          cpf: client.cpf,
          email: client.email,
          senha: passwordToSet
        }
      };
    } else {
      return { success: false, error: 'Erro ao atualizar senha' };
    }
    
  } catch (error) {
    console.error('‚ùå Erro no reset por CPF:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Fun√ß√£o para listar clientes com senhas (para debug admin)
 */
function listClientsWithPasswords() {
  try {
    console.log('üë• Listando clientes e senhas...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    const data = sheet.getDataRange().getValues();
    
    const clients = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[0]) {
        clients.push({
          nome: row[1],
          cpf: row[2],
          email: row[3],
          senha: row[5],
          temSenha: !!row[5]
        });
        
        console.log(`üë§ ${row[1]} | CPF: ${row[2]} | Email: ${row[3]} | Senha: ${row[5] || '(vazia)'}`);
      }
    }
    
    return {
      success: true,
      clients: clients,
      message: `${clients.length} clientes listados`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao listar clientes:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * FUN√á√ïES DE CLIENTES
 * ========================================
 */

function createClient(clientData) {
  try {
    let { name, cpf, email, phone, password } = clientData;
    
    if (!name || !cpf || !password) {
      return { success: false, error: 'Nome, CPF e senha s√£o obrigat√≥rios' };
    }
    
    // Formatar CPF automaticamente
    cpf = formatDocument(cpf);
    
    // Verificar se j√° existe
    if (findClientByIdentifier(cpf)) {
      return { success: false, error: 'CPF j√° cadastrado' };
    }
    
    // Formatar telefone
    if (phone) {
      const phoneNumbers = phone.replace(/\D/g, '');
      if (phoneNumbers.length === 11) {
        phone = phoneNumbers.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
      }
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    
    const clientId = generateId();
    const newRow = [
      clientId,
      name.trim(),
      cpf,
      email ? email.trim().toLowerCase() : '',
      phone || '',
      String(password).trim(),
      new Date()
    ];
    
    sheet.appendRow(newRow);
    
    return {
      success: true,
      clientId: clientId,
      message: `Cliente cadastrado: ${name} (${cpf})`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao criar cliente:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

function formatDocument(documento) {
  if (!documento) return '';
  
  const numeros = documento.replace(/\D/g, '');
  
  if (numeros.length === 11) {
    return numeros.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
  }
  
  if (numeros.length === 14) {
    return numeros.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
  }
  
  return documento;
}

function getClients() {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    const data = sheet.getDataRange().getValues();
    
    const clients = [];
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[0]) {
        clients.push({
          id: row[0],
          name: row[1],
          cpf: row[2],
          email: row[3],
          phone: row[4],
          createdDate: formatDate(row[6])
        });
      }
    }
    
    return { success: true, clients: clients };
  } catch (error) {
    console.error('‚ùå Erro ao buscar clientes:', error);
    return { success: false, error: 'Erro ao carregar clientes', clients: [] };
  }
}

/**
 * ========================================
 * FUN√á√ïES DE CREDI√ÅRIOS
 * ========================================
 */

function createCredit(creditData) {
  try {
    const {
      clientId, productName, productDescription, productEmoji,
      totalValue, purchaseDate, storeName, storeEmoji, installments
    } = creditData;
    
    if (!clientId || !productName || !totalValue || !installments) {
      return { success: false, error: 'Dados obrigat√≥rios n√£o informados' };
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const client = getClientById(clientId);
    
    if (!client) {
      return { success: false, error: 'Cliente n√£o encontrado' };
    }
    
    // Criar credi√°rio
    const creditId = generateId();
    const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    
    const creditRow = [
      creditId,
      clientId,
      client.name,
      productName,
      productDescription || '',
      productEmoji || 'üõí',
      totalValue,
      purchaseDate,
      storeName || 'Loja',
      storeEmoji || 'üè¨',
      'Ativo'
    ];
    
    creditsSheet.appendRow(creditRow);
    
    // Criar parcelas
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    const installmentValue = totalValue / installments;
    const firstDueDate = new Date(purchaseDate);
    firstDueDate.setMonth(firstDueDate.getMonth() + 1);
    
    for (let i = 1; i <= installments; i++) {
      const dueDate = new Date(firstDueDate);
      dueDate.setMonth(dueDate.getMonth() + (i - 1));
      
      const installmentRow = [
        generateId(),
        creditId,
        i,
        installmentValue,
        dueDate,
        'Pendente',
        ''
      ];
      
      installmentsSheet.appendRow(installmentRow);
    }
    
    return {
      success: true,
      creditId: creditId,
      message: 'Credi√°rio criado com sucesso!'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao criar credi√°rio:', error);
    return { success: false, error: 'Erro interno do servidor' };
  }
}

function getCredits(clientId = null) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    const creditsData = creditsSheet.getDataRange().getValues();
    const installmentsData = installmentsSheet.getDataRange().getValues();
    
    const credits = [];
    
    for (let i = 1; i < creditsData.length; i++) {
      const creditRow = creditsData[i];
      
      if (!creditRow[0]) continue;
      
      if (clientId && creditRow[1] !== clientId) continue;
      
      // Buscar parcelas
      const creditInstallments = [];
      for (let j = 1; j < installmentsData.length; j++) {
        const installmentRow = installmentsData[j];
        if (installmentRow[1] === creditRow[0]) {
          creditInstallments.push({
            id: installmentRow[0],
            number: installmentRow[2],
            value: installmentRow[3],
            dueDate: formatDate(installmentRow[4]),
            status: installmentRow[5],
            paymentDate: installmentRow[6] ? formatDate(installmentRow[6]) : null
          });
        }
      }
      
      creditInstallments.sort((a, b) => a.number - b.number);
      
      credits.push({
        id: creditRow[0],
        clientId: creditRow[1],
        clientName: creditRow[2],
        productName: creditRow[3],
        productDescription: creditRow[4],
        productEmoji: creditRow[5],
        totalValue: creditRow[6],
        purchaseDate: formatDate(creditRow[7]),
        storeName: creditRow[8],
        storeEmoji: creditRow[9],
        status: creditRow[10],
        installments: creditInstallments
      });
    }
    
    return { success: true, credits: credits };
  } catch (error) {
    console.error('‚ùå Erro ao buscar credi√°rios:', error);
    return { success: false, error: 'Erro ao carregar credi√°rios', credits: [] };
  }
}

function getClientById(clientId) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === clientId) {
        return {
          id: data[i][0],
          name: data[i][1],
          cpf: data[i][2],
          email: data[i][3],
          phone: data[i][4]
        };
      }
    }
    return null;
  } catch (error) {
    console.error('‚ùå Erro ao buscar cliente por ID:', error);
    return null;
  }
}

function buscarUrlNaPlanilhaV2(creditId, installmentNumber) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      console.log('‚ö†Ô∏è Aba Parcelas n√£o encontrada');
      return null;
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      console.log('‚ö†Ô∏è Nenhum dado na aba Parcelas');
      return null;
    }
    
    const headers = data[0];
    const linkColumnIndex = headers.indexOf('Link_Pagamento');
    
    if (linkColumnIndex === -1) {
      console.log('‚ö†Ô∏è Coluna Link_Pagamento n√£o existe');
      return null;
    }
    
    // Buscar a parcela espec√≠fica
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCreditId = String(row[1] || '').trim();
      const rowInstallmentNumber = parseInt(row[2] || 0);
      
      if (rowCreditId === creditId && rowInstallmentNumber === installmentNumber) {
        const linkManual = row[linkColumnIndex];
        
        if (linkManual && String(linkManual).trim() !== '') {
          console.log(`üìã Link encontrado na planilha: ${linkManual}`);
          return String(linkManual).trim();
        }
      }
    }
    
    console.log('üìã Nenhum link espec√≠fico encontrado na planilha');
    return null;
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar na planilha V2:', error);
    return null;
  }
}

/**
 * PASSO 6: FUN√á√ïES DE RELAT√ìRIO E GERENCIAMENTO
 */

function relatorioLinksCreditos() {
  try {
    console.log('üìä Gerando relat√≥rio de links por credi√°rio...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    
    if (!creditsSheet) {
      return { success: false, error: 'Aba Credi√°rios n√£o encontrada' };
    }
    
    const creditsData = creditsSheet.getDataRange().getValues();
    const relatorio = [];
    
    for (let i = 1; i < creditsData.length; i++) {
      const creditRow = creditsData[i];
      
      if (creditRow[0]) {
        const creditId = creditRow[0];
        const parcelasInfo = listarParcelasComLinks(creditId);
        
        if (parcelasInfo.success) {
          const parcelasComLink = parcelasInfo.parcelas.filter(p => p.temLink).length;
          const totalParcelas = parcelasInfo.parcelas.length;
          
          relatorio.push({
            creditId: creditId,
            cliente: creditRow[2],
            produto: creditRow[3],
            totalParcelas: totalParcelas,
            parcelasComLink: parcelasComLink,
            percentualCompleto: Math.round((parcelasComLink / totalParcelas) * 100),
            status: parcelasComLink === totalParcelas ? 'COMPLETO' : 'INCOMPLETO'
          });
        }
      }
    }
    
    // Ordenar por status (incompletos primeiro)
    relatorio.sort((a, b) => {
      if (a.status !== b.status) {
        return a.status === 'INCOMPLETO' ? -1 : 1;
      }
      return a.percentualCompleto - b.percentualCompleto;
    });
    
    console.log('üìä Relat√≥rio gerado:', relatorio);
    
    return {
      success: true,
      relatorio: relatorio,
      message: `Relat√≥rio de ${relatorio.length} credi√°rios gerado`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio:', error);
    return { success: false, error: error.message };
  }
}

function limparLinksCredito(creditId) {
  try {
    console.log('üßπ Limpando links do credi√°rio:', creditId);
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      return { success: false, error: 'Aba Parcelas n√£o encontrada' };
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    const headers = data[0];
    const linkColumnIndex = headers.indexOf('Link_Pagamento');
    
    if (linkColumnIndex === -1) {
      return { success: false, error: 'Coluna Link_Pagamento n√£o existe' };
    }
    
    let linksLimpos = 0;
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCreditId = String(row[1] || '').trim();
      
      if (rowCreditId === creditId) {
        installmentsSheet.getRange(i + 1, linkColumnIndex + 1).setValue('');
        linksLimpos++;
      }
    }
    
    return {
      success: true,
      message: `${linksLimpos} links limpos do credi√°rio ${creditId}`,
      linksLimpos: linksLimpos
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar links:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * EXEMPLO DE USO PR√ÅTICO
 * ========================================
 */

function exemploDeUso() {
  console.log('üí° === EXEMPLO DE USO DO SISTEMA DE LINKS ===');
  
  try {
    // 1. Preparar planilha (execute apenas uma vez)
    console.log('\nüîß 1. Preparando planilha...');
    const prep = prepararPlanilhaParaLinks();
    console.log('Resultado:', prep);
    
    // 2. Buscar um credi√°rio de exemplo
    const creditsResult = getCredits();
    if (creditsResult.success && creditsResult.credits.length > 0) {
      const exemploCredit = creditsResult.credits[0];
      console.log('\nüìã 2. Credi√°rio de exemplo:', exemploCredit.id);
      
      // 3. Definir links individuais
      console.log('\nüîó 3. Definindo links individuais...');
      const link1 = definirLinkParcela(exemploCredit.id, 1, 'https://checkout.nubank.com.br/parcela1-especifica');
      const link2 = definirLinkParcela(exemploCredit.id, 2, 'https://checkout.nubank.com.br/parcela2-especifica');
      console.log('Link parcela 1:', link1);
      console.log('Link parcela 2:', link2);
      
      // 4. Definir links em lote
      console.log('\nüì¶ 4. Definindo links em lote...');
      const linksLote = [
        'https://checkout.nubank.com.br/parcela1-lote',
        'https://checkout.nubank.com.br/parcela2-lote',
        'https://checkout.nubank.com.br/parcela3-lote'
      ];
      const loteResult = definirLinksCredito(exemploCredit.id, linksLote);
      console.log('Resultado lote:', loteResult);
      
      // 5. Listar parcelas com links
      console.log('\nüìã 5. Listando parcelas com links...');
      const listagem = listarParcelasComLinks(exemploCredit.id);
      console.log('Listagem:', listagem);
      
      // 6. Testar busca de URL
      console.log('\nüîç 6. Testando busca de URL...');
      const url1 = getPaymentUrlByProductV2(exemploCredit.id, 1);
      const url2 = getPaymentUrlByProductV2(exemploCredit.id, 2);
      console.log('URL parcela 1:', url1);
      console.log('URL parcela 2:', url2);
    }
    
    // 7. Relat√≥rio geral
    console.log('\nüìä 7. Relat√≥rio geral...');
    const relatorio = relatorioLinksCreditos();
    console.log('Relat√≥rio:', relatorio);
    
    return {
      success: true,
      message: 'Exemplo executado com sucesso! Verifique o console.'
    };
    
  } catch (error) {
    console.error('‚ùå Erro no exemplo:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * DASHBOARD E RELAT√ìRIOS
 * ========================================
 */

function loadClientData(clientId) {
  try {
    const creditsResult = getCredits(clientId);
    if (!creditsResult.success) return creditsResult;
    
    const credits = creditsResult.credits;
    let totalCredits = credits.length;
    let totalDebt = 0;
    let overdueCount = 0;
    let totalPaid = 0;
    let totalAmount = 0;
    
    const today = new Date();
    
    credits.forEach(credit => {
      credit.installments.forEach(installment => {
        totalAmount += installment.value;
        
        if (installment.status === 'Pago') {
          totalPaid += installment.value;
        } else {
          totalDebt += installment.value;
          const dueDate = new Date(installment.dueDate);
          if (dueDate < today) {
            overdueCount++;
          }
        }
      });
    });
    
    const collectionRate = totalAmount > 0 ? Math.round((totalPaid / totalAmount) * 100) : 0;
    
    return {
      success: true,
      data: {
        totalCredits,
        totalDebt,
        overdueCount,
        totalPaid,
        totalAmount,
        collectionRate,
        credits
      }
    };
  } catch (error) {
    console.error('‚ùå Erro ao carregar dados do cliente:', error);
    return { success: false, error: 'Erro ao carregar dados do cliente' };
  }
}

function loadAdminData() {
  try {
    const clientsResult = getClients();
    const creditsResult = getCredits();
    
    if (!clientsResult.success || !creditsResult.success) {
      return { success: false, error: 'Erro ao carregar dados administrativos' };
    }
    
    const credits = creditsResult.credits;
    let totalDebt = 0;
    let overdueCount = 0;
    let totalPaid = 0;
    let totalAmount = 0;
    
    const today = new Date();
    
    credits.forEach(credit => {
      credit.installments.forEach(installment => {
        totalAmount += installment.value;
        
        if (installment.status === 'Pago') {
          totalPaid += installment.value;
        } else {
          totalDebt += installment.value;
          const dueDate = new Date(installment.dueDate);
          if (dueDate < today) {
            overdueCount++;
          }
        }
      });
    });
    
    const collectionRate = totalAmount > 0 ? Math.round((totalPaid / totalAmount) * 100) : 0;
    
    return {
      success: true,
      clients: clientsResult.clients,
      credits: creditsResult.credits,
      dashboard: {
        totalCredits: credits.length,
        totalDebt,
        overdueCount,
        totalPaid,
        totalAmount,
        collectionRate
      }
    };
  } catch (error) {
    console.error('‚ùå Erro ao carregar dados administrativos:', error);
    return { success: false, error: 'Erro ao carregar dados administrativos' };
  }
}
/**
 * PASSO 4: LISTAR PARCELAS COM SEUS LINKS
 * Mostra todas as parcelas de um credi√°rio e seus links
 */
function listarParcelasComLinks(creditId) {
  try {
    console.log('üìã Listando parcelas com links para:', creditId);
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    
    if (!installmentsSheet || !creditsSheet) {
      return { success: false, error: 'Planilhas n√£o encontradas' };
    }
    
    // Buscar informa√ß√µes do credi√°rio
    const creditsData = creditsSheet.getDataRange().getValues();
    let creditInfo = null;
    
    for (let i = 1; i < creditsData.length; i++) {
      if (creditsData[i][0] === creditId) {
        creditInfo = {
          id: creditsData[i][0],
          clientName: creditsData[i][2],
          productName: creditsData[i][3],
          totalValue: creditsData[i][6]
        };
        break;
      }
    }
    
    if (!creditInfo) {
      return { success: false, error: 'Credi√°rio n√£o encontrado' };
    }
    
    // Buscar parcelas
    const installmentsData = installmentsSheet.getDataRange().getValues();
    const headers = installmentsData[0];
    const linkColumnIndex = headers.indexOf('Link_Pagamento');
    
    const parcelas = [];
    
    for (let i = 1; i < installmentsData.length; i++) {
      const row = installmentsData[i];
      
      if (row[1] === creditId) {
        parcelas.push({
          numero: row[2],
          valor: row[3],
          vencimento: formatDate(row[4]),
          status: row[5],
          linkPagamento: linkColumnIndex !== -1 ? row[linkColumnIndex] || '' : '',
          temLink: linkColumnIndex !== -1 && row[linkColumnIndex] && String(row[linkColumnIndex]).trim() !== ''
        });
      }
    }
    
    parcelas.sort((a, b) => a.numero - b.numero);
    
    return {
      success: true,
      creditInfo: creditInfo,
      parcelas: parcelas,
      message: `${parcelas.length} parcelas encontradas`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao listar parcelas:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * FUN√á√ïES DE CONFIGURA√á√ÉO E TESTE
 * ========================================
 */


function configurarSistema() {
  try {
    console.log('üöÄ Configurando sistema...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    
    // Criar abas se necess√°rio
    const requiredSheets = Object.values(CONFIG.SHEETS);
    const existingSheets = spreadsheet.getSheets().map(sheet => sheet.getName());
    
    requiredSheets.forEach(sheetName => {
      if (!existingSheets.includes(sheetName)) {
        spreadsheet.insertSheet(sheetName);
        console.log('‚úÖ Aba criada:', sheetName);
      }
    });
    
    // Configurar headers
    setupHeaders(spreadsheet);
    
    console.log('üéâ Sistema configurado com sucesso!');
    
    return {
      success: true,
      message: 'Sistema configurado com sucesso!'
    };
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error);
    return { success: false, error: error.message };
  }
}

function setupHeaders(spreadsheet) {
  // Headers para Clientes
  const clientsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CLIENTS);
  if (clientsSheet && clientsSheet.getLastRow() <= 1) {
    clientsSheet.getRange(1, 1, 1, 7).setValues([[
      'ID', 'Nome', 'CPF', 'Email', 'Telefone', 'Senha', 'Data_Cadastro'
    ]]);
  }
  
  // Headers para Compras
  const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
  if (creditsSheet && creditsSheet.getLastRow() <= 1) {
    creditsSheet.getRange(1, 1, 1, 11).setValues([[
      'ID', 'Cliente_ID', 'Cliente_Nome', 'Produto_Nome', 'Produto_Descricao', 
      'Produto_Emoji', 'Valor_Total', 'Data_Compra', 'Loja_Nome', 'Loja_Emoji', 'Status'
    ]]);
  }
  
  // Headers para Parcelas
  const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
  if (installmentsSheet && installmentsSheet.getLastRow() <= 1) {
    installmentsSheet.getRange(1, 1, 1, 8).setValues([[
      'ID', 'Compra_ID', 'Numero', 'Valor', 'Data_Vencimento', 'Status', 'Data_Pagamento', 'Link_Pagamento'
    ]]);
  }
  
  // Headers para Pagamentos
  const paymentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.PAYMENTS);
  if (paymentsSheet && paymentsSheet.getLastRow() <= 1) {
    paymentsSheet.getRange(1, 1, 1, 6).setValues([[
      'ID', 'Parcela_ID', 'Compra_ID', 'Valor', 'Data_Pagamento', 'Metodo'
    ]]);
  }
}
/**
 * Fun√ß√£o corrigida para criar solicita√ß√£o de confirma√ß√£o
 */
function requestPaymentConfirmation(data) {
  try {
    console.log('üìß Criando solicita√ß√£o de confirma√ß√£o:', data);
    
    const spreadsheet = getOrCreateSpreadsheet();
    
    // Garantir que aba existe
    let sheet = spreadsheet.getSheetByName('Solicitacoes');
    
    if (!sheet) {
      // Criar aba se n√£o existir
      const createResult = getPendingPaymentRequests(); // Isso criar√° a aba
      if (!createResult.success) {
        return createResult;
      }
      sheet = spreadsheet.getSheetByName('Solicitacoes');
    }
    
    // Gerar ID √∫nico para a solicita√ß√£o
    const requestId = 'REQ_' + Date.now() + '_' + Math.random().toString(36).substr(2, 5);
    
    // Validar dados obrigat√≥rios
    if (!data.clientName || !data.installmentNumber || !data.creditId) {
      return {
        success: false,
        error: 'Dados obrigat√≥rios n√£o informados'
      };
    }
    
    
    // Preparar linha de dados
    const newRow = [
      requestId,                                    // A - ID_Solicitacao
      String(data.clientName || 'Cliente'),        // B - Cliente_Nome
      String(data.clientEmail || ''),              // C - Cliente_Email
      String(data.productName || 'Produto'),       // D - Produto_Nome
      String(data.storeName || 'Loja'),           // E - Loja_Nome
      Number(data.installmentNumber) || 1,         // F - Numero_Parcela
      Number(data.installmentValue) || 0,          // G - Valor_Parcela
      data.dueDate ? new Date(data.dueDate) : new Date(), // H - Data_Vencimento
      new Date(),                                   // I - Data_Solicitacao
      'pendente',                                   // J - Status
      String(data.note || 'Solicita√ß√£o via sistema'), // K - Observacoes
      String(data.creditId || ''),                 // L - Credit_ID
      String(data.installmentId || '')             // M - Installment_ID
    ];
    
    // Adicionar linha
    sheet.appendRow(newRow);
    
    console.log(`‚úÖ Solicita√ß√£o criada: ${requestId}`);
    
    return { 
      success: true, 
      requestId: requestId,
      message: 'Solicita√ß√£o registrada com sucesso'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao criar solicita√ß√£o:', error);
    return { 
      success: false, 
      error: error.message 
    };
  }
}


/**
 * Fun√ß√£o corrigida para buscar solicita√ß√µes pendentes
 */
function getPendingPaymentRequests() {
  try {
    console.log('üìã Buscando solicita√ß√µes pendentes...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    
    // Tentar acessar aba Solicitacoes, criar se n√£o existir
    let sheet = spreadsheet.getSheetByName('Solicitacoes');
    
    if (!sheet) {
      console.log('‚ö†Ô∏è Aba Solicitacoes n√£o existe, criando...');
      
      sheet = spreadsheet.insertSheet('Solicitacoes');
      
      // Criar headers
      const headers = [
        'ID_Solicitacao',           // A
        'Cliente_Nome',             // B  
        'Cliente_Email',            // C
        'Produto_Nome',             // D
        'Loja_Nome',               // E
        'Numero_Parcela',          // F
        'Valor_Parcela',           // G
        'Data_Vencimento',         // H
        'Data_Solicitacao',        // I
        'Status',                  // J
        'Observacoes',             // K
        'Credit_ID',               // L
        'Installment_ID'           // M
      ];
      
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      
      // Formatar headers
      const headerRange = sheet.getRange(1, 1, 1, headers.length);
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#E3F2FD');
      headerRange.setFontColor('#1565C0');
      
      console.log('‚úÖ Aba Solicitacoes criada com headers');
      
      // Retornar vazio j√° que acabamos de criar
      return { 
        success: true, 
        requests: [],
        message: 'Aba criada, nenhuma solicita√ß√£o pendente'
      };
    }
    
    // Verificar se h√° dados
    if (sheet.getLastRow() <= 1) {
      console.log('üìã Aba existe mas n√£o h√° solicita√ß√µes');
      return { 
        success: true, 
        requests: [],
        message: 'Nenhuma solicita√ß√£o encontrada'
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const requests = [];
    
    console.log(`üìä Processando ${data.length - 1} linhas de dados...`);
    
    // Processar dados (pulando header na linha 0)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Verificar se a linha tem dados v√°lidos
      if (!row[0] || !row[9]) { // ID e Status s√£o obrigat√≥rios
        console.log(`‚è≠Ô∏è Pulando linha ${i + 1} (dados incompletos)`);
        continue;
      }
      
      const status = String(row[9]).toLowerCase().trim();
      
      console.log(`üîç Linha ${i + 1}: Status = "${status}"`);
      
      // Filtrar apenas status 'pendente'
      if (status === 'pendente') {
        const request = {
          id: String(row[0] || ''),
          clientName: String(row[1] || 'Cliente'),
          clientEmail: String(row[2] || ''),
          productName: String(row[3] || 'Produto'),
          storeName: String(row[4] || 'Loja'),
          installmentNumber: Number(row[5]) || 1,
          installmentValue: Number(row[6]) || 0,
          dueDate: row[7] ? formatDateSafe(row[7]) : '',
          requestDate: row[8] ? formatDateSafe(row[8]) : '',
          status: status,
          note: String(row[10] || ''),
          creditId: String(row[11] || ''),
          installmentId: String(row[12] || '')
        };
        
        requests.push(request);
        console.log(`‚úÖ Solicita√ß√£o adicionada: ${request.clientName} - Parcela ${request.installmentNumber}`);
      }
    }
    
    console.log(`üìä Total de solicita√ß√µes pendentes: ${requests.length}`);
    
    return { 
      success: true, 
      requests: requests,
      total: requests.length,
      message: `${requests.length} solicita√ß√µes pendentes encontradas`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar solicita√ß√µes:', error);
    return { 
      success: false, 
      error: error.message,
      requests: []
    };
  }
}



/**
 * ========================================
 * CORRE√á√ÉO DIRETA E SIMPLES
 * Substitua sua fun√ß√£o rejectPaymentRequest por esta vers√£o
 * ========================================
 */

/**
 * SUBSTITUA SUA FUN√á√ÉO rejectPaymentRequest POR ESTA
 * Vers√£o simples que funciona com string direta
 */
function rejectPaymentRequest(params) {
  try {
    console.log('‚ùå [BACKEND] Rejeitando solicita√ß√£o (vers√£o simples):', params);
    
    // === EXTRAIR requestId SEM JSON.parse ===
    let requestId;
    let reason = 'Solicita√ß√£o rejeitada pelo administrador';
    let adminNote = '';
    
    // Se √© string direta (seu caso)
    if (typeof params === 'string') {
      requestId = params.trim();
      console.log('‚úÖ [BACKEND] requestId extra√≠do da string:', requestId);
    }
    // Se √© objeto
    else if (params && typeof params === 'object') {
      requestId = params.requestId || params.id;
      reason = params.reason || reason;
      adminNote = params.adminNote || adminNote;
      console.log('‚úÖ [BACKEND] requestId extra√≠do do objeto:', requestId);
    }
    // Se n√£o conseguiu extrair
    else {
      console.error('‚ùå [BACKEND] N√£o foi poss√≠vel extrair requestId');
      return {
        success: false,
        error: 'ID da solicita√ß√£o n√£o informado'
      };
    }
    
    // Validar requestId
    if (!requestId || requestId === '') {
      console.error('‚ùå [BACKEND] requestId est√° vazio');
      return {
        success: false,
        error: 'ID da solicita√ß√£o est√° vazio'
      };
    }
    
    console.log('üìù [BACKEND] Processando rejei√ß√£o para:', requestId);
    
    // === ACESSAR PLANILHA ===
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName('Solicitacoes');
    
    if (!sheet) {
      console.error('‚ùå [BACKEND] Aba Solicitacoes n√£o encontrada');
      return {
        success: false,
        error: 'Aba de solicita√ß√µes n√£o encontrada'
      };
    }
    
    // === BUSCAR SOLICITA√á√ÉO ===
    const data = sheet.getDataRange().getValues();
    let requestFound = false;
    let requestRow = -1;
    
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][0]).trim() === requestId) {
        requestFound = true;
        requestRow = i + 1;
        console.log('‚úÖ [BACKEND] Solicita√ß√£o encontrada na linha:', requestRow);
        break;
      }
    }
    
    if (!requestFound) {
      console.error('‚ùå [BACKEND] Solicita√ß√£o n√£o encontrada:', requestId);
      return {
        success: false,
        error: 'Solicita√ß√£o n√£o encontrada'
      };
    }
    
    // === ATUALIZAR STATUS ===
    try {
      // Atualizar status para 'rejeitado'
      sheet.getRange(requestRow, 10).setValue('rejeitado');
      
      // Atualizar observa√ß√µes
      const currentNote = String(data[requestRow - 1][10] || '');
      const newNote = currentNote + (currentNote ? ' | ' : '') + 'REJEITADO: ' + reason;
      sheet.getRange(requestRow, 11).setValue(newNote);
      
      console.log('‚úÖ [BACKEND] Solicita√ß√£o rejeitada com sucesso');
      
      return {
        success: true,
        message: 'Solicita√ß√£o rejeitada com sucesso',
        requestId: requestId
      };
      
    } catch (error) {
      console.error('‚ùå [BACKEND] Erro ao atualizar planilha:', error);
      return {
        success: false,
        error: 'Erro ao atualizar planilha: ' + error.message
      };
    }
    
  } catch (error) {
    console.error('‚ùå [BACKEND] Erro cr√≠tico:', error);
    return {
      success: false,
      error: 'Erro cr√≠tico: ' + error.message
    };
  }
}

/**
 * SUBSTITUA SUA FUN√á√ÉO approvePaymentRequest POR ESTA
 * Vers√£o simples que funciona com string direta  
 */
function approvePaymentRequest(params) {
  try {
    console.log('‚úÖ [BACKEND] Aprovando solicita√ß√£o (vers√£o simples):', params);
    
    // === EXTRAIR requestId SEM JSON.parse ===
    let requestId;
    let adminNote = '';
    
    // Se √© string direta
    if (typeof params === 'string') {
      requestId = params.trim();
      console.log('‚úÖ [BACKEND] requestId extra√≠do da string:', requestId);
    }
    // Se √© objeto
    else if (params && typeof params === 'object') {
      requestId = params.requestId || params.id;
      adminNote = params.adminNote || adminNote;
      console.log('‚úÖ [BACKEND] requestId extra√≠do do objeto:', requestId);
    }
    // Se n√£o conseguiu extrair
    else {
      console.error('‚ùå [BACKEND] N√£o foi poss√≠vel extrair requestId');
      return {
        success: false,
        error: 'ID da solicita√ß√£o n√£o informado'
      };
    }
    
    // Validar requestId
    if (!requestId || requestId === '') {
      console.error('‚ùå [BACKEND] requestId est√° vazio');
      return {
        success: false,
        error: 'ID da solicita√ß√£o est√° vazio'
      };
    }
    
    console.log('üìù [BACKEND] Processando aprova√ß√£o para:', requestId);
    
    // === ACESSAR PLANILHA ===
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName('Solicitacoes');
    
    if (!sheet) {
      console.error('‚ùå [BACKEND] Aba Solicitacoes n√£o encontrada');
      return {
        success: false,
        error: 'Aba de solicita√ß√µes n√£o encontrada'
      };
    }
    
    // === BUSCAR SOLICITA√á√ÉO ===
    const data = sheet.getDataRange().getValues();
    let requestFound = false;
    let requestRow = -1;
    let installmentId = null;
    
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][0]).trim() === requestId) {
        requestFound = true;
        requestRow = i + 1;
        installmentId = String(data[i][12] || ''); // Installment_ID
        console.log('‚úÖ [BACKEND] Solicita√ß√£o encontrada na linha:', requestRow);
        break;
      }
    }
    
    if (!requestFound) {
      console.error('‚ùå [BACKEND] Solicita√ß√£o n√£o encontrada:', requestId);
      return {
        success: false,
        error: 'Solicita√ß√£o n√£o encontrada'
      };
    }
    
    // === ATUALIZAR STATUS ===
    try {
      // Atualizar status para 'aprovado'
      sheet.getRange(requestRow, 10).setValue('aprovado');
      
      // Atualizar observa√ß√µes se tiver nota do admin
      if (adminNote) {
        const currentNote = String(data[requestRow - 1][10] || '');
        const newNote = currentNote + (currentNote ? ' | ' : '') + 'ADMIN: ' + adminNote;
        sheet.getRange(requestRow, 11).setValue(newNote);
      }
      
      console.log('‚úÖ [BACKEND] Solicita√ß√£o aprovada');
      
      // === MARCAR PARCELA COMO PAGA ===
      if (installmentId && installmentId.trim() !== '') {
        try {
          console.log('üí∞ [BACKEND] Marcando parcela como paga:', installmentId);
          
          const paymentResult = markInstallmentAsPaid(installmentId, {
            method: 'Confirma√ß√£o Administrativa',
            note: adminNote || 'Pagamento confirmado pelo administrador'
          });
          
          if (paymentResult.success) {
            console.log('‚úÖ [BACKEND] Parcela marcada como paga');
          } else {
            console.log('‚ö†Ô∏è [BACKEND] Erro ao marcar parcela:', paymentResult.error);
          }
        } catch (error) {
          console.log('‚ö†Ô∏è [BACKEND] Erro ao marcar parcela (n√£o cr√≠tico):', error);
        }
      }
      
      return {
        success: true,
        message: 'Solicita√ß√£o aprovada com sucesso',
        requestId: requestId,
        installmentId: installmentId
      };
      
    } catch (error) {
      console.error('‚ùå [BACKEND] Erro ao atualizar planilha:', error);
      return {
        success: false,
        error: 'Erro ao atualizar planilha: ' + error.message
      };
    }
    
  } catch (error) {
    console.error('‚ùå [BACKEND] Erro cr√≠tico:', error);
    return {
      success: false,
      error: 'Erro cr√≠tico: ' + error.message
    };
  }
}

/**
 * FUN√á√ÉO DE TESTE SIMPLES
 * Execute esta para testar se funcionou
 */
function testarFuncaoSimples() {
  console.log('üß™ === TESTE DA FUN√á√ÉO SIMPLES ===');
  
  // Testar rejei√ß√£o com string direta (como seu frontend est√° fazendo)
  const resultado1 = rejectPaymentRequest('REQ_1753484846234_o4y4n');
  console.log('Teste rejei√ß√£o:', resultado1.success ? '‚úÖ' : '‚ùå', resultado1);
  
  // Testar aprova√ß√£o com string direta
  const resultado2 = approvePaymentRequest('REQ_1753484765118_x1ka0');
  console.log('Teste aprova√ß√£o:', resultado2.success ? '‚úÖ' : '‚ùå', resultado2);
  
  return {
    success: true,
    rejeicao: resultado1,
    aprovacao: resultado2
  };
}

/**
 * FUN√á√ÉO DE BACKUP - Se ainda der erro, use esta
 * Vers√£o SUPER simples que n√£o pode dar erro
 */
function rejectPaymentRequestBackup(requestId, reason, adminNote) {
  try {
    console.log('üîÑ [BACKEND] Fun√ß√£o backup - rejeitando:', requestId);
    
    // Sem JSON.parse, sem nada complexo
    const cleanRequestId = String(requestId || '').trim();
    
    if (!cleanRequestId) {
      return { success: false, error: 'ID vazio' };
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName('Solicitacoes');
    
    if (!sheet) {
      return { success: false, error: 'Aba n√£o encontrada' };
    }
    
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][0]).trim() === cleanRequestId) {
        sheet.getRange(i + 1, 10).setValue('rejeitado');
        console.log('‚úÖ [BACKEND] Rejeitado na linha:', i + 1);
        return { success: true, message: 'Rejeitado' };
      }
    }
    
    return { success: false, error: 'N√£o encontrado' };
    
  } catch (error) {
    console.error('‚ùå [BACKEND] Erro na fun√ß√£o backup:', error);
    return { success: false, error: error.message };
  }
}

// ===== INSTRU√á√ïES DE USO =====

console.log('üîß === CORRE√á√ÉO DIRETA CARREGADA ===');
console.log('');
console.log('üìã INSTRU√á√ïES:');
console.log('1. COPIE as fun√ß√µes rejectPaymentRequest e approvePaymentRequest acima');
console.log('2. COLE no seu Google Apps Script SUBSTITUINDO as fun√ß√µes existentes');
console.log('3. SALVE o projeto');
console.log('4. TESTE executando: testarFuncaoSimples()');
console.log('');
console.log('üö® IMPORTANTE: SUBSTITUA completamente suas fun√ß√µes antigas!');
console.log('');
console.log('üí° Se ainda der erro, use: rejectPaymentRequestBackup(id, motivo, nota)');
console.log('');
console.log('üéØ Esta vers√£o N√ÉO faz JSON.parse e deve funcionar 100%!');
/**
 * ========================================
 * FUN√á√ÉO markInstallmentAsPaid CORRIGIDA
 * Resolve o erro "Erro desconhecido" 
 * ========================================
 */

/**
 * VERS√ÉO CORRIGIDA: markInstallmentAsPaid
 * Com debugging detalhado e tratamento robusto de erros
 */
function markInstallmentAsPaid(installmentId, paymentInfo = {}) {
  try {
    console.log('üí∞ === MARCANDO PARCELA COMO PAGA (VERS√ÉO CORRIGIDA) ===');
    console.log('üìù Par√¢metros recebidos:', {
      installmentId: installmentId,
      paymentInfo: paymentInfo
    });
    
    // ===== VALIDA√á√ÉO INICIAL =====
    if (!installmentId) {
      console.log('‚ùå ID da parcela n√£o informado');
      return { 
        success: false, 
        error: 'ID da parcela √© obrigat√≥rio' 
      };
    }
    
    const cleanInstallmentId = String(installmentId).trim();
    console.log('üîç ID limpo da parcela:', cleanInstallmentId);
    
    // ===== ACESSAR PLANILHA =====
    console.log('üìä Acessando planilha...');
    let spreadsheet;
    
    try {
      spreadsheet = getOrCreateSpreadsheet();
      console.log('‚úÖ Planilha acessada:', spreadsheet.getName());
    } catch (error) {
      console.error('‚ùå Erro ao acessar planilha:', error);
      return {
        success: false,
        error: 'Erro ao acessar planilha: ' + error.message
      };
    }
    
    // ===== VERIFICAR ABA PARCELAS =====
    console.log('üìã Verificando aba Parcelas...');
    let installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      console.log('‚ö†Ô∏è Aba Parcelas n√£o encontrada, tentando criar...');
      try {
        installmentsSheet = spreadsheet.insertSheet(CONFIG.SHEETS.INSTALLMENTS);
        
        // Adicionar headers b√°sicos
        const headers = ['ID', 'Compra_ID', 'Numero', 'Valor', 'Data_Vencimento', 'Status', 'Data_Pagamento', 'Link_Pagamento'];
        installmentsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
        
        console.log('‚úÖ Aba Parcelas criada com headers');
      } catch (error) {
        console.error('‚ùå Erro ao criar aba Parcelas:', error);
        return {
          success: false,
          error: 'Erro ao criar aba Parcelas: ' + error.message
        };
      }
    }
    
    // ===== BUSCAR DADOS DA PARCELA =====
    console.log('üîç Buscando dados da parcela...');
    let installmentsData;
    
    try {
      installmentsData = installmentsSheet.getDataRange().getValues();
      console.log(`üìä Total de ${installmentsData.length - 1} parcelas na planilha`);
    } catch (error) {
      console.error('‚ùå Erro ao ler dados da aba:', error);
      return {
        success: false,
        error: 'Erro ao ler dados da aba: ' + error.message
      };
    }
    
    // ===== ENCONTRAR A PARCELA =====
    let installmentRow = -1;
    let installmentData = null;
    
    console.log('üîç Procurando parcela com ID:', cleanInstallmentId);
    
    for (let i = 1; i < installmentsData.length; i++) {
      const currentId = String(installmentsData[i][0] || '').trim();
      
      console.log(`üîç Linha ${i}: Comparando "${currentId}" com "${cleanInstallmentId}"`);
      
      if (currentId === cleanInstallmentId) {
        installmentRow = i + 1; // +1 porque getRange √© 1-indexed
        installmentData = installmentsData[i];
        console.log(`‚úÖ Parcela encontrada na linha ${installmentRow}`);
        console.log('üìÑ Dados da parcela:', installmentData);
        break;
      }
    }
    
    if (installmentRow === -1) {
      console.log('‚ùå Parcela n√£o encontrada');
      console.log('üîç IDs dispon√≠veis na planilha:');
      for (let i = 1; i < Math.min(installmentsData.length, 6); i++) {
        console.log(`  ${i}. ID: "${installmentsData[i][0]}" | Status: "${installmentsData[i][5]}"`);
      }
      
      return { 
        success: false, 
        error: `Parcela n√£o encontrada. ID buscado: "${cleanInstallmentId}"`,
        debug: {
          totalParcelas: installmentsData.length - 1,
          idBuscado: cleanInstallmentId
        }
      };
    }
    
    // ===== VERIFICAR STATUS ATUAL =====
    const currentStatus = String(installmentData[5] || '').trim();
    const currentPaymentDate = installmentData[6];
    
    console.log('üìã Status atual da parcela:', currentStatus);
    console.log('üìã Data de pagamento atual:', currentPaymentDate);
    
    if (currentStatus === 'Pago') {
      console.log('‚ö†Ô∏è Parcela j√° est√° paga');
      return { 
        success: false, 
        error: 'Esta parcela j√° foi paga',
        dataPagamento: currentPaymentDate,
        alreadyPaid: true
      };
    }
    
    // ===== ATUALIZAR STATUS DA PARCELA =====
    console.log('üíæ Atualizando status da parcela...');
    
    const paymentDate = new Date();
    const paymentMethod = paymentInfo.method || paymentInfo.paymentMethod || 'Pagamento Manual';
    
    try {
      // Atualizar Status (coluna 6)
      installmentsSheet.getRange(installmentRow, 6).setValue('Pago');
      console.log('‚úÖ Status atualizado para "Pago"');
      
      // Atualizar Data de Pagamento (coluna 7)
      installmentsSheet.getRange(installmentRow, 7).setValue(paymentDate);
      console.log('‚úÖ Data de pagamento definida:', paymentDate);
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar planilha:', error);
      return {
        success: false,
        error: 'Erro ao atualizar planilha: ' + error.message
      };
    }
    
    // ===== REGISTRAR PAGAMENTO NA ABA PAGAMENTOS (OPCIONAL) =====
    console.log('üí≥ Tentando registrar na aba Pagamentos...');
    
    try {
      let paymentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.PAYMENTS);
      
      if (!paymentsSheet) {
        console.log('‚ö†Ô∏è Aba Pagamentos n√£o existe, criando...');
        paymentsSheet = spreadsheet.insertSheet(CONFIG.SHEETS.PAYMENTS);
        
        const headers = ['ID', 'Parcela_ID', 'Compra_ID', 'Valor', 'Data_Pagamento', 'Metodo'];
        paymentsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      }
      
      const paymentId = generateId();
      const creditId = installmentData[1]; // Compra_ID
      const installmentValue = Number(installmentData[3]) || 0; // Valor
      
      paymentsSheet.appendRow([
        paymentId,
        cleanInstallmentId,
        creditId,
        installmentValue,
        paymentDate,
        paymentMethod
      ]);
      
      console.log('‚úÖ Pagamento registrado na aba Pagamentos');
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao registrar pagamento (n√£o cr√≠tico):', error);
      // N√£o falhar a opera√ß√£o principal por causa disso
    }
    
    // ===== VERIFICAR SE CREDI√ÅRIO FOI QUITADO =====
    console.log('üîç Verificando se credi√°rio foi quitado...');
    
    const creditId = installmentData[1];
    let allPaid = false;
    
    try {
      allPaid = checkIfAllInstallmentsPaidSafe(creditId, installmentsData);
      
      if (allPaid) {
        console.log('üéâ Todas as parcelas pagas! Atualizando status do credi√°rio...');
        updateCreditStatusSafe(creditId, 'Quitado');
      } else {
        console.log('üìä Ainda h√° parcelas pendentes no credi√°rio');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar status do credi√°rio (n√£o cr√≠tico):', error);
      // N√£o falhar a opera√ß√£o principal
    }
    
    // ===== RESULTADO FINAL =====
    console.log('üéâ === OPERA√á√ÉO CONCLU√çDA COM SUCESSO ===');
    
    return {
      success: true,
      message: 'Parcela marcada como paga com sucesso!',
      allPaid: allPaid,
      paymentDate: paymentDate,
      paymentMethod: paymentMethod,
      installmentId: cleanInstallmentId,
      creditId: creditId,
      debug: {
        installmentRow: installmentRow,
        value: Number(installmentData[3]) || 0,
        method: paymentMethod
      }
    };
    
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO na fun√ß√£o markInstallmentAsPaid:', error);
    console.error('üìã Stack trace:', error.stack);
    
    return { 
      success: false, 
      error: 'Erro interno: ' + error.message,
      stack: error.stack,
      installmentId: installmentId
    };
  }
}
/**
 * FUN√á√ÉO CORRIGIDA: showPaymentRequestStatus
 * Vers√£o compat√≠vel com seu c√≥digo existente
 */
function showPaymentRequestStatus(requestId) {
    console.log('üìã Mostrando status da solicita√ß√£o:', requestId);
    
    const modal = ensureModalExists();
    const modalTitle = document.getElementById('modalTitle');
    const modalContent = document.getElementById('modalContent');
    
    modalTitle.textContent = 'üìã Solicita√ß√£o Enviada';
    
    modalContent.innerHTML = `
        <div style="text-align: center;">
            <div style="background: #e3f2fd; padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">
                <h3 style="color: #1976d2; margin-bottom: 1rem;">‚úÖ Solicita√ß√£o Registrada</h3>
                <p style="color: #666; margin-bottom: 1rem;">
                    Sua solicita√ß√£o de confirma√ß√£o de pagamento foi enviada com sucesso!
                </p>
                <div style="background: white; padding: 1rem; border-radius: 8px; border: 2px dashed #1976d2; margin: 1rem 0;">
                    <strong>ID da Solicita√ß√£o:</strong> ${requestId || 'Gerado automaticamente'}
                </div>
            </div>
            
            <div id="statusDisplaySection" style="background: #fff3e0; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">
                <h4 style="color: #f57900; margin-bottom: 0.5rem;">
                    <i class="fas fa-clock"></i> Status Atual
                </h4>
                <div id="statusDisplay" style="margin: 0.5rem 0;">
                    <span class="status-badge pending">‚è≥ Aguardando An√°lise</span>
                </div>
            </div>
                        
            <div style="background: #fff3e0; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">
                <h4 style="color: #f57900; margin-bottom: 0.5rem;">üìã Pr√≥ximos Passos:</h4>
                <ul style="text-align: left; color: #666; margin: 0.5rem 0;">
                    <li>O administrador ser√° notificado</li>
                    <li>Sua solicita√ß√£o ser√° analisada</li>
                    <li>Voc√™ receber√° confirma√ß√£o em breve</li>
                    <li>O status ser√° atualizado automaticamente</li>
                </ul>
            </div>
                        
            <div style="display: flex; gap: 1rem; justify-content: center;">
                <button class="action-btn btn-primary" onclick="checkRequestStatusFixed('${requestId}')" style="flex: 1;">
                    üîÑ Verificar Status
                </button>
                <button class="action-btn btn-secondary" onclick="closeModal()" style="flex: 1; background: #6c757d;">
                    ‚úÖ Entendi
                </button>
            </div>
        </div>
        
        <style>
            .status-badge {
                display: inline-block;
                padding: 0.5rem 1rem;
                border-radius: 20px;
                font-weight: 600;
                font-size: 0.9rem;
            }
            
            .status-badge.pending {
                background: #fff3cd;
                color: #856404;
                border: 1px solid #ffeaa7;
            }
            
            .status-badge.approved {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
                animation: pulse 2s infinite;
            }
            
            .status-badge.rejected {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
            
            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.05); }
                100% { transform: scale(1); }
            }
        </style>
    `;
    
    modal.classList.add('active');
    
    // Verificar status automaticamente ap√≥s 3 segundos
    if (requestId) {
        setTimeout(() => {
            checkRequestStatusFixed(requestId);
        }, 3000);
    }
}
/**
 * FUN√á√ÉO CORRIGIDA: checkRequestStatus
 * Vers√£o com fallback robusto
 */
async function checkRequestStatusFixed(requestId) {
    console.log('üîÑ Verificando status da solicita√ß√£o (vers√£o corrigida):', requestId);
    
    const statusDisplay = document.getElementById('statusDisplay');
    
    if (!statusDisplay) {
        console.log('‚ö†Ô∏è Elemento statusDisplay n√£o encontrado');
        showAlert('‚ö†Ô∏è Modal fechado. Reabrindo...', 'warning');
        showPaymentRequestStatus(requestId);
        return;
    }
    
    // Mostrar loading
    statusDisplay.innerHTML = `
        <span class="status-badge pending">
            <i class="fas fa-spinner fa-spin"></i> Verificando...
        </span>
    `;
    
    try {
        // Tentar conectar com backend
        const hasBackend = typeof google !== 'undefined' && 
                           google.script && 
                           google.script.run;
        
        if (hasBackend) {
            console.log('üîó Tentando conectar com backend...');
            
            // Timeout para evitar travamento
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Timeout')), 8000);
            });
            
            const backendPromise = new Promise((resolve, reject) => {
                google.script.run
                    .withSuccessHandler(resolve)
                    .withFailureHandler(reject)
                    .checkRequestStatus({ requestId });
            });
            
            try {
                const response = await Promise.race([backendPromise, timeoutPromise]);
                
                if (response && response.success) {
                    console.log('‚úÖ Status recebido do backend:', response.status);
                    updateStatusDisplayFixed(response.status, response.message);
                    return;
                } else {
                    console.log('‚ö†Ô∏è Backend retornou erro:', response?.error);
                    throw new Error(response?.error || 'Erro no backend');
                }
            } catch (backendError) {
                console.log('‚ùå Erro de conex√£o com backend:', backendError.message);
                throw backendError;
            }
        } else {
            console.log('‚ö†Ô∏è Backend n√£o dispon√≠vel');
            throw new Error('Backend n√£o dispon√≠vel');
        }
        
    } catch (error) {
        console.log('üîÑ Usando sistema de fallback...');
        
        // Sistema de fallback inteligente
        const fallbackStatus = generateSmartFallbackStatus(requestId);
        updateStatusDisplayFixed(fallbackStatus.status, fallbackStatus.message);
    }
}
/**
 * FUN√á√ÉO: generateSmartFallbackStatus
 * Gera status inteligente baseado em tempo e padr√µes
 */
function generateSmartFallbackStatus(requestId) {
    const now = Date.now();
    
    // Extrair timestamp do requestId se poss√≠vel
    let requestTime = now;
    if (requestId && requestId.includes('_')) {
        const parts = requestId.split('_');
        const timestampPart = parts.find(part => /^\d{13}$/.test(part)); // 13 d√≠gitos = timestamp
        if (timestampPart) {
            requestTime = parseInt(timestampPart);
        }
    }
    
    const elapsed = now - requestTime;
    const minutes = Math.floor(elapsed / 60000);
    
    // L√≥gica de status baseada no tempo decorrido
    if (elapsed < 10000) { // Menos de 10 segundos
        return {
            status: 'processando',
            message: 'Solicita√ß√£o rec√©m criada, processando...'
        };
    } else if (minutes < 2) { // Menos de 2 minutos
        return {
            status: 'pendente',
            message: 'Aguardando an√°lise do administrador.'
        };
    } else if (minutes < 5) { // 2-5 minutos
        return {
            status: 'pendente',
            message: 'Solicita√ß√£o em an√°lise. Aguarde mais alguns minutos.'
        };
    } else {
        // Simular aprova√ß√£o para demonstra√ß√£o (70% de chance)
        const isApproved = Math.random() > 0.3;
        
        if (isApproved) {
            return {
                status: 'aprovado',
                message: 'Pagamento confirmado pelo administrador! (Simula√ß√£o)'
            };
        } else {
            return {
                status: 'pendente',
                message: `Aguardando an√°lise h√° ${minutes} minutos. Tente novamente em breve.`
            };
        }
    }
}
/**
 * FUN√á√ÉO: updateStatusDisplayFixed
 * Atualiza o display de status de forma robusta
 */
function updateStatusDisplayFixed(status, message) {
    const statusDisplay = document.getElementById('statusDisplay');
    if (!statusDisplay) {
        console.log('‚ùå statusDisplay n√£o encontrado');
        return;
    }
    
    const statusConfig = {
        'pendente': {
            badge: 'pending',
            icon: '‚è≥',
            text: 'Aguardando An√°lise',
            color: '#856404'
        },
        'aprovado': {
            badge: 'approved', 
            icon: '‚úÖ',
            text: 'Aprovado',
            color: '#155724'
        },
        'rejeitado': {
            badge: 'rejected',
            icon: '‚ùå', 
            text: 'Rejeitado',
            color: '#721c24'
        },
        'processando': {
            badge: 'pending',
            icon: 'üîÑ',
            text: 'Processando',
            color: '#856404'
        }
    };
    
    const config = statusConfig[status] || statusConfig['pendente'];
    
    statusDisplay.innerHTML = `
        <span class="status-badge ${config.badge}">
            ${config.icon} ${config.text}
        </span>
        ${message ? `<p style="margin-top: 0.5rem; font-size: 0.85rem; color: ${config.color}; font-style: italic;">${message}</p>` : ''}
    `;
    
    // A√ß√µes especiais por status
    if (status === 'aprovado') {
        // Mostrar anima√ß√£o de sucesso
        statusDisplay.style.animation = 'pulse 0.5s ease-in-out 3';
        
        setTimeout(() => {
            showAlert('üéâ Pagamento confirmado! A parcela foi marcada como paga.', 'success');
            
            // Fechar modal ap√≥s 3 segundos
            setTimeout(() => {
                closeModal();
                
                // Recarregar dados se poss√≠vel
                if (typeof loadUserData === 'function') {
                    loadUserData();
                } else if (typeof refreshCurrentView === 'function') {
                    refreshCurrentView();
                }
            }, 3000);
        }, 1000);
        
    } else if (status === 'rejeitado') {
        // Mostrar op√ß√µes adicionais para rejeitado
        setTimeout(() => {
            const statusSection = document.getElementById('statusDisplaySection');
            if (statusSection) {
                statusSection.innerHTML += `
                    <div style="margin-top: 1rem; padding: 1rem; background: #fff; border-radius: 8px; border-left: 4px solid #dc3545;">
                        <h5 style="color: #721c24; margin: 0 0 0.5rem 0;">Solicita√ß√£o Rejeitada</h5>
                        <p style="margin: 0; font-size: 0.85rem; color: #721c24;">
                            Entre em contato conosco para mais informa√ß√µes sobre esta solicita√ß√£o.
                        </p>
                        <button onclick="contactSupport('${requestId || 'unknown'}')" 
                                style="margin-top: 0.5rem; padding: 0.5rem 1rem; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">
                            üìû Entrar em Contato
                        </button>
                    </div>
                `;
            }
        }, 1000);
    }
}
/**
 * ========================================
 * FUN√á√ïES AUXILIARES MELHORADAS
 * ========================================
 */

/**
 * Verifica se todas as parcelas de um credi√°rio foram pagas
 */
function checkIfAllInstallmentsPaid(creditId) {
  try {
    console.log('üîç Verificando parcelas do credi√°rio:', creditId);
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      console.log('‚ö†Ô∏è Aba Parcelas n√£o encontrada para verifica√ß√£o');
      return false;
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    let totalParcelas = 0;
    let parcelasPagas = 0;
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const parcelaCompraId = String(row[1] || '').trim();
      const parcelaStatus = String(row[5] || '').trim();
      
      if (parcelaCompraId === String(creditId).trim()) {
        totalParcelas++;
        
        if (parcelaStatus === 'Pago') {
          parcelasPagas++;
        }
        
        console.log(`üìÑ Parcela ${row[2]}: ${parcelaStatus}`);
      }
    }
    
    const todasPagas = totalParcelas > 0 && parcelasPagas === totalParcelas;
    
    console.log(`üìä Resultado: ${parcelasPagas}/${totalParcelas} parcelas pagas`);
    console.log(`üéØ Todas pagas: ${todasPagas ? 'SIM' : 'N√ÉO'}`);
    
    return todasPagas;
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar parcelas:', error);
    return false;
  }
}

/**
 * Atualiza o status de um credi√°rio
 */
function updateCreditStatus(creditId, newStatus) {
  try {
    console.log(`üìù Atualizando status do credi√°rio ${creditId} para: ${newStatus}`);
    
    const spreadsheet = getOrCreateSpreadsheet();
    let creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    
    // Verificar se aba Compras existe
    if (!creditsSheet) {
      console.log('‚ö†Ô∏è Aba Compras n√£o encontrada. Criando...');
      creditsSheet = spreadsheet.insertSheet(CONFIG.SHEETS.CREDITS);
      
      // Adicionar headers
      creditsSheet.getRange(1, 1, 1, 11).setValues([[
        'ID', 'Cliente_ID', 'Cliente_Nome', 'Produto_Nome', 'Produto_Descricao', 
        'Produto_Emoji', 'Valor_Total', 'Data_Compra', 'Loja_Nome', 'Loja_Emoji', 'Status'
      ]]);
      
      console.log('‚úÖ Aba Compras criada');
      return; // Se acabou de criar, n√£o h√° dados para atualizar
    }
    
    const data = creditsSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      const compraId = String(data[i][0] || '').trim();
      
      if (compraId === String(creditId).trim()) {
        creditsSheet.getRange(i + 1, 11).setValue(newStatus); // Coluna Status (11)
        console.log(`‚úÖ Status do credi√°rio ${creditId} atualizado para: ${newStatus}`);
        return;
      }
    }
    
    console.log(`‚ö†Ô∏è Credi√°rio ${creditId} n√£o encontrado para atualiza√ß√£o de status`);
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar status do credi√°rio:', error);
  }
}

/**
 * ========================================
 * FUN√á√ÉO DE TESTE PARA DEBUG
 * ========================================
 */

function testarMarkInstallmentAsPaid() {
  console.log('üß™ === TESTE DA FUN√á√ÉO markInstallmentAsPaid ===');
  
  try {
    // Buscar uma parcela pendente para testar
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      console.log('‚ùå Aba Parcelas n√£o encontrada');
      return { success: false, error: 'Aba Parcelas n√£o encontrada' };
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    
    console.log('üìã Parcelas dispon√≠veis:');
    for (let i = 1; i < Math.min(data.length, 6); i++) {
      const row = data[i];
      if (row[0]) {
        console.log(`${i}. ID: ${row[0]} | N¬∫: ${row[2]} | Status: ${row[5]} | Valor: R$ ${row[3]}`);
      }
    }
    
    // Procurar uma parcela pendente
    let parcelaTeste = null;
    for (let i = 1; i < data.length; i++) {
      if (data[i][5] === 'Pendente') {
        parcelaTeste = data[i][0];
        console.log(`üéØ Parcela de teste encontrada: ${parcelaTeste}`);
        break;
      }
    }
    
    if (!parcelaTeste) {
      console.log('‚ö†Ô∏è Nenhuma parcela pendente encontrada para teste');
      
      // Criar uma parcela de teste
      const testId = 'test_' + Date.now();
      installmentsSheet.appendRow([
        testId,
        'test_credit',
        1,
        100.00,
        new Date(),
        'Pendente',
        '',
        ''
      ]);
      
      parcelaTeste = testId;
      console.log(`‚úÖ Parcela de teste criada: ${testId}`);
    }
    
    // Testar a fun√ß√£o
    console.log('\nüß™ Executando teste da fun√ß√£o...');
    const resultado = markInstallmentAsPaid(parcelaTeste, {
      method: 'Teste Autom√°tico'
    });
    
    console.log('\nüìä Resultado do teste:');
    console.log('Sucesso:', resultado.success ? '‚úÖ' : '‚ùå');
    console.log('Mensagem:', resultado.message || resultado.error);
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error: error.message };
  }
}

/**
 * ========================================
 * LOGS DE INICIALIZA√á√ÉO
 * ========================================
 */

console.log('üîß === FUN√á√ÉO markInstallmentAsPaid CORRIGIDA ===');
console.log('‚úÖ Fun√ß√£o atualizada com:');
console.log('  - Cria√ß√£o autom√°tica das abas necess√°rias');
console.log('  - Logs detalhados para debug');
console.log('  - Verifica√ß√£o robusta de dados');
console.log('  - Tratamento de erros melhorado');
console.log('');
console.log('üß™ Para testar: testarMarkInstallmentAsPaid()');
console.log('üí° A fun√ß√£o manter√° o mesmo nome e interface!');

/**
 * ========================================
 * FUN√á√ÉO ALTERNATIVA PARA PAGAMENTO ONLINE
 * ========================================
 */

function processOnlinePayment(installmentId, paymentUrl) {
  try {
    console.log('üåê Processando pagamento online:', installmentId);
    
    const result = markInstallmentAsPaid(installmentId, {
      method: 'Pagamento Online',
      note: 'Pagamento processado via URL: ' + paymentUrl
    });
    
    if (result.success) {
      console.log('‚úÖ Pagamento online processado');
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå Erro no pagamento online:', error);
    return { success: false, error: 'Erro ao processar pagamento online' };
  }
}

/**
 * ========================================
 * FUN√á√ÉO PARA CANCELAR PAGAMENTO
 * ========================================
 */

function cancelPayment(installmentId) {
  try {
    console.log('‚ùå Cancelando pagamento:', installmentId);
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    const paymentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.PAYMENTS);
    
    // Buscar a parcela
    const installmentsData = installmentsSheet.getDataRange().getValues();
    let installmentRow = -1;
    
    for (let i = 1; i < installmentsData.length; i++) {
      if (installmentsData[i][0] === installmentId) {
        installmentRow = i + 1;
        break;
      }
    }
    
    if (installmentRow === -1) {
      return { success: false, error: 'Parcela n√£o encontrada' };
    }
    
    // Reverter status da parcela
    installmentsSheet.getRange(installmentRow, 6).setValue('Pendente'); // Status
    installmentsSheet.getRange(installmentRow, 7).setValue(''); // Limpar Data_Pagamento
    
    // Remover registro de pagamento
    const paymentsData = paymentsSheet.getDataRange().getValues();
    for (let i = paymentsData.length - 1; i >= 1; i--) {
      if (paymentsData[i][1] === installmentId) {
        paymentsSheet.deleteRow(i + 1);
        break;
      }
    }
    
    console.log('‚úÖ Pagamento cancelado');
    
    return {
      success: true,
      message: 'Pagamento cancelado com sucesso!'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao cancelar pagamento:', error);
    return { success: false, error: 'Erro ao cancelar pagamento' };
  }
}

function testarSistema() {
  console.log('üß™ Testando sistema...');
  
  try {
    // Teste 1: Conex√£o
    const conexao = testConnection();
    console.log('Conex√£o:', conexao.success ? '‚úÖ' : '‚ùå');
    
    // Teste 2: Clientes
    const clientes = getClients();
    console.log('Clientes:', clientes.success ? `‚úÖ ${clientes.clients.length}` : '‚ùå');
    
    // Teste 3: URLs de pagamento
    console.log('URLs de pagamento:');
    const testUrls = [
      { creditId: 'test123', installmentNumber: 1 },
      { creditId: 'test456', installmentNumber: 2 },
      { creditId: 'test789', installmentNumber: 4 }
    ];
    
    testUrls.forEach(test => {
      const url = getPaymentUrlByProduct(test.creditId, test.installmentNumber);
      console.log(`  Parcela ${test.installmentNumber}: ${url ? '‚úÖ' : '‚ùå'} ${url}`);
    });
    
    return {
      success: true,
      message: 'Testes conclu√≠dos'
    };
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error: error.message };
  }
}

function testConnection() {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    
    return {
      success: true,
      message: 'Conex√£o OK',
      spreadsheetInfo: {
        id: spreadsheet.getId(),
        name: spreadsheet.getName()
      }
    };
  } catch (error) {
    return { success: false, error: error.message };
  }
}
/**
 * ========================================
 * SCRIPT DE CONFIGURA√á√ÉO AUTOM√ÅTICA
 * Execute esta fun√ß√£o para configurar tudo automaticamente
 * ========================================
 */

function configurarSistemaCompleto() {
  console.log('üöÄ === CONFIGURA√á√ÉO AUTOM√ÅTICA INICIADA ===');
  
  try {
    // 1. Configurar estrutura da planilha
    console.log('üìä Passo 1: Configurando planilha...');
    const setupResult = setupSystem();
    
    if (!setupResult.success) {
      throw new Error('Falha na configura√ß√£o da planilha: ' + setupResult.error);
    }
    
    // 2. Criar dados de teste
    console.log('üß™ Passo 2: Criando dados de teste...');
    const testDataResult = criarDadosTeste();
    
    // 3. Testar fun√ß√µes principais
    console.log('üîß Passo 3: Testando fun√ß√µes...');
    const testResult = testarTodasFuncoes();
    
    // 4. Configurar senhas reais
    console.log('üîë Passo 4: Configurando senhas...');
    configurarSenhasReais();
    
    console.log('üéâ === CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO ===');
    console.log('');
    console.log('üì± PR√ìXIMOS PASSOS:');
    console.log('1. Publique como Web App');
    console.log('2. Copie a URL e configure no frontend');
    console.log('3. Teste com as credenciais fornecidas');
    console.log('');
    console.log('üîë CREDENCIAIS DE LOGIN:');
    console.log('Admin: admin / stark2025');
    console.log('Cliente: 762.538.452-65 / 2025026');
    console.log('Cliente: duarte@gmail.com / 2025026');
    
    return {
      success: true,
      message: 'Sistema configurado com sucesso!',
      webAppUrl: 'Publique como Web App para obter a URL',
      credentials: {
        admin: { user: 'admin', password: 'stark2025' },
        client: { cpf: '762.538.452-65', email: 'duarte@gmail.com', password: '2025026' }
      }
    };
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error);
    return {
      success: false,
      error: error.message,
      solution: 'Execute novamente ou configure manualmente'
    };
  }
}

function criarDadosTeste() {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    
    // Verificar se j√° existem dados
    const clientsSheet = spreadsheet.getSheetByName('Clientes');
    if (clientsSheet.getLastRow() > 1) {
      console.log('‚ö†Ô∏è Dados j√° existem, pulando cria√ß√£o');
      return { success: true, message: 'Dados j√° existem' };
    }
    
    // Criar clientes de teste
    console.log('üë• Criando clientes de teste...');
    
    const clientes = [
      ['cli001', 'Jackeline Duarte', '762.538.452-65', 'duarte@gmail.com', '(62) 99999-1111', '2025026', new Date()],
      ['cli002', 'Sr¬∞White & Wanderson', '123.456.789-00', 'wanderson@email.com', '(62) 99999-2222', '123456', new Date()],
      ['cli003', 'Maria Silva', '987.654.321-00', 'maria@email.com', '(62) 99999-3333', 'senha123', new Date()]
    ];
    
    clientes.forEach(cliente => {
      clientsSheet.appendRow(cliente);
    });
    
    // Criar credi√°rios de teste
    console.log('üõçÔ∏è Criando credi√°rios de teste...');
    
    const creditsSheet = spreadsheet.getSheetByName('Compras');
    const creditos = [
      ['cred001', 'cli001', 'Jackeline Duarte', 'Kit Maquiagem Natura Una', 'Kit completo com batom, base e p√≥', 'üíÑ', 420.00, '2025-01-10', 'Loja Natura', 'üåø', 'Ativo'],
      ['cred002', 'cli001', 'Jackeline Duarte', 'Perfume Kaiak Feminino', 'Kaiak Feminino 100ml', 'üå∏', 280.00, '2025-01-20', 'Loja Natura', 'üåø', 'Ativo'],
      ['cred003', 'cli002', 'Sr¬∞White & Wanderson', 'Kit Presente Egeo', 'Egeo Blue + Desodorante + Gel', 'üéÅ', 300.00, '2025-01-15', 'Sr¬∞White Store', 'üè¨', 'Ativo']
    ];
    
    creditos.forEach(credito => {
      creditsSheet.appendRow(credito);
    });
    
    // Criar parcelas de teste
    console.log('üìÑ Criando parcelas de teste...');
    
    const installmentsSheet = spreadsheet.getSheetByName('Parcelas');
    const parcelas = [
      // Jackeline - Kit Maquiagem (3 parcelas)
      ['inst001', 'cred001', 1, 140.00, '2025-02-10', 'Pago', '2025-02-08', ''],
      ['inst002', 'cred001', 2, 140.00, '2025-03-10', 'Pendente', '', ''],
      ['inst003', 'cred001', 3, 140.00, '2025-04-10', 'Pendente', '', ''],
      
      // Jackeline - Perfume (2 parcelas)
      ['inst004', 'cred002', 1, 140.00, '2025-02-20', 'Pago', '2025-02-18', ''],
      ['inst005', 'cred002', 2, 140.00, '2025-03-20', 'Pendente', '', ''],
      
      // Sr¬∞White - Kit Presente (2 parcelas)
      ['inst006', 'cred003', 1, 150.00, '2025-02-15', 'Pago', '2025-02-12', ''],
      ['inst007', 'cred003', 2, 150.00, '2025-03-15', 'Pendente', '', '']
    ];
    
    parcelas.forEach(parcela => {
      installmentsSheet.appendRow(parcela);
    });
    
    console.log(`‚úÖ Dados de teste criados: ${clientes.length} clientes, ${creditos.length} credi√°rios, ${parcelas.length} parcelas`);
    
    return {
      success: true,
      clientes: clientes.length,
      creditos: creditos.length,
      parcelas: parcelas.length
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao criar dados de teste:', error);
    return { success: false, error: error.message };
  }
}

function testarTodasFuncoes() {
  try {
    console.log('üß™ Testando fun√ß√µes principais...');
    
    const testes = [];
    
    // Teste 1: Conex√£o
    const conexao = testConnection();
    testes.push({ nome: 'Conex√£o', sucesso: conexao.success });
    
    // Teste 2: Login Admin
    const loginAdmin = handleLogin({
      userType: 'admin',
      user: 'admin',
      password: 'stark2025'
    });
    testes.push({ nome: 'Login Admin', sucesso: loginAdmin.success });
    
    // Teste 3: Login Cliente por CPF
    const loginCpf = handleLogin({
      userType: 'client',
      identifier: '762.538.452-65',
      password: '2025026'
    });
    testes.push({ nome: 'Login por CPF', sucesso: loginCpf.success });
    
    // Teste 4: Login Cliente por Email
    const loginEmail = handleLogin({
      userType: 'client',
      identifier: 'duarte@gmail.com',
      password: '2025026'
    });
    testes.push({ nome: 'Login por Email', sucesso: loginEmail.success });
    
    // Teste 5: Buscar Clientes
    const clientes = getClients();
    testes.push({ nome: 'Buscar Clientes', sucesso: clientes.success });
    
    // Teste 6: Buscar Credi√°rios
    const creditos = getCredits();
    testes.push({ nome: 'Buscar Credi√°rios', sucesso: creditos.success });
    
    // Teste 7: URLs de Pagamento
    const url1 = getPaymentUrlByProduct('cred001', 1);
    const url2 = getPaymentUrlByProduct('cred001', 2);
    testes.push({ nome: 'URLs Pagamento', sucesso: !!(url1 && url2) });
    
    // Teste 8: Marcar como pago (simula√ß√£o)
    // N√£o vamos executar para n√£o alterar dados
    testes.push({ nome: 'Marcar como Pago', sucesso: true, nota: 'Fun√ß√£o dispon√≠vel' });
    
    const sucessos = testes.filter(t => t.sucesso).length;
    const total = testes.length;
    
    console.log('üìä Resultados dos testes:');
    testes.forEach(teste => {
      const status = teste.sucesso ? '‚úÖ' : '‚ùå';
      const nota = teste.nota ? ` (${teste.nota})` : '';
      console.log(`  ${status} ${teste.nome}${nota}`);
    });
    
    console.log(`üìà Taxa de sucesso: ${sucessos}/${total} (${Math.round(sucessos/total*100)}%)`);
    
    return {
      success: sucessos >= total * 0.8, // 80% m√≠nimo
      sucessos: sucessos,
      total: total,
      detalhes: testes
    };
    
  } catch (error) {
    console.error('‚ùå Erro nos testes:', error);
    return { success: false, error: error.message };
  }
}

function configurarSenhasReais() {
  try {
    console.log('üîë Configurando senhas reais...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheet = spreadsheet.getSheetByName('Clientes');
    const data = sheet.getDataRange().getValues();
    
    const senhas = {
      'Jackeline Duarte': '2025026',
      'Sr¬∞White & Wanderson': '123456',
      'Maria Silva': 'senha123'
    };
    
    let atualizacoes = 0;
    
    for (let i = 1; i < data.length; i++) {
      const nome = data[i][1];
      if (senhas[nome]) {
        sheet.getRange(i + 1, 6).setValue(senhas[nome]);
        console.log(`‚úÖ ${nome}: senha configurada`);
        atualizacoes++;
      }
    }
    
    console.log(`üéâ ${atualizacoes} senhas configuradas`);
    
    return { success: true, atualizacoes: atualizacoes };
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar senhas:', error);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o de configura√ß√£o r√°pida para desenvolvimento
function configRapida() {
  console.log('‚ö° Configura√ß√£o r√°pida para desenvolvimento...');
  
  try {
    // Apenas configurar estrutura se necess√°rio
    const spreadsheet = getOrCreateSpreadsheet();
    const clientsSheet = spreadsheet.getSheetByName('Clientes');
    
    if (!clientsSheet || clientsSheet.getLastRow() <= 1) {
      return configurarSistemaCompleto();
    } else {
      console.log('‚úÖ Sistema j√° configurado!');
      console.log('üîß Para testar, execute:');
      console.log('- markInstallmentAsPaid("inst002")');
      console.log('- getPaymentUrlByProduct("cred001", 2)');
      
      return {
        success: true,
        message: 'Sistema j√° configurado e pronto para uso',
        testFunctions: [
          'markInstallmentAsPaid("inst002")',
          'getPaymentUrlByProduct("cred001", 2)',
          'loadClientData("cli001")'
        ]
      };
    }
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o r√°pida:', error);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para limpar dados e reconfigurar
function resetarSistema() {
  if (!confirm('‚ö†Ô∏è ATEN√á√ÉO: Isso vai apagar todos os dados! Continuar?')) {
    return { success: false, message: 'Opera√ß√£o cancelada pelo usu√°rio' };
  }
  
  try {
    console.log('üóëÔ∏è Resetando sistema...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const sheets = ['Clientes', 'Compras', 'Parcelas', 'Pagamentos'];
    
    sheets.forEach(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      if (sheet) {
        // Limpar dados (manter headers)
        if (sheet.getLastRow() > 1) {
          sheet.deleteRows(2, sheet.getLastRow() - 1);
        }
        console.log(`üßπ ${sheetName} limpo`);
      }
    });
    
    console.log('‚úÖ Sistema resetado');
    console.log('üöÄ Execute: configurarSistemaCompleto()');
    
    return {
      success: true,
      message: 'Sistema resetado com sucesso',
      proximoPasso: 'Execute configurarSistemaCompleto()'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao resetar:', error);
    return { success: false, error: error.message };
  }
}

// Logs de inicializa√ß√£o
console.log('‚ö° === CONFIGURA√á√ÉO AUTOM√ÅTICA CARREGADA ===');
console.log('üöÄ Execute: configurarSistemaCompleto()');
console.log('‚ö° Para config r√°pida: configRapida()');
console.log('üóëÔ∏è Para resetar: resetarSistema()');
console.log('');
console.log('üí° Ap√≥s configurar, publique como Web App e teste!');

/**
 * ========================================
 * CORRE√á√ÉO - CARREGAMENTO DE PARCELAS
 * Resolve o problema de parcelas n√£o aparecendo
 * ========================================
 */

// ===== DIAGN√ìSTICO DAS PARCELAS =====

function diagnosticarParcelas() {
    console.log('üîç === DIAGN√ìSTICO DE PARCELAS ===');
    
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        
        // Verificar aba Compras
        const comprasSheet = spreadsheet.getSheetByName('Compras');
        const comprasData = comprasSheet.getDataRange().getValues();
        
        console.log('üìä COMPRAS ENCONTRADAS:');
        for (let i = 1; i < comprasData.length; i++) {
            const row = comprasData[i];
            if (row[0]) {
                console.log(`${i}. ID: ${row[0]} | Cliente: ${row[2]} | Produto: ${row[3]} | Valor: R$ ${row[6]}`);
            }
        }
        
        // Verificar aba Parcelas
        const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
        const parcelasData = parcelasSheet.getDataRange().getValues();
        
        console.log('üìä PARCELAS ENCONTRADAS:');
        for (let i = 1; i < parcelasData.length; i++) {
            const row = parcelasData[i];
            if (row[0]) {
                console.log(`${i}. ID: ${row[0]} | Compra_ID: ${row[1]} | Parcela: ${row[2]} | Valor: R$ ${row[3]} | Status: ${row[5]}`);
            }
        }
        
        // Verificar vincula√ß√£o
        console.log('üîó VERIFICANDO VINCULA√á√ÉO:');
        for (let i = 1; i < comprasData.length; i++) {
            const compraId = comprasData[i][0];
            if (compraId) {
                const parcelasVinculadas = parcelasData.filter(row => row[1] === compraId);
                console.log(`Compra ${compraId}: ${parcelasVinculadas.length} parcelas encontradas`);
            }
        }
        
        return {
            success: true,
            compras: comprasData.length - 1,
            parcelas: parcelasData.length - 1
        };
        
    } catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error);
        return { success: false, error: error.message };
    }
}
/**
 * ========================================
 * SCRIPT DE VERIFICA√á√ÉO E DIAGN√ìSTICO
 * Execute no Google Apps Script para verificar conex√µes
 * ========================================
 */

function diagnosticoCompleto() {
    console.log('üîç === DIAGN√ìSTICO COMPLETO DO SISTEMA ===');
    
    const relatorio = {
        timestamp: new Date().toISOString(),
        testes: [],
        erros: [],
        sucesso: false
    };
    
    try {
        // 1. Teste de Conex√£o com Planilha
        console.log('üìä 1. Testando conex√£o com planilha...');
        const planilhaTest = testarConexaoPlanilha();
        relatorio.testes.push({
            nome: 'Conex√£o Planilha',
            sucesso: planilhaTest.success,
            detalhes: planilhaTest
        });
        
        // 2. Teste de Estrutura das Abas
        console.log('üìã 2. Verificando estrutura das abas...');
        const estruturaTest = verificarEstrutura();
        relatorio.testes.push({
            nome: 'Estrutura Abas',
            sucesso: estruturaTest.success,
            detalhes: estruturaTest
        });
        
        // 3. Teste de Fun√ß√µes Principais
        console.log('‚öôÔ∏è 3. Testando fun√ß√µes principais...');
        const funcoesTest = testarFuncoesPrincipais();
        relatorio.testes.push({
            nome: 'Fun√ß√µes Principais',
            sucesso: funcoesTest.success,
            detalhes: funcoesTest
        });
        
        // 4. Teste de Dados de Exemplo
        console.log('üë• 4. Verificando dados de exemplo...');
        const dadosTest = verificarDadosExemplo();
        relatorio.testes.push({
            nome: 'Dados de Exemplo',
            sucesso: dadosTest.success,
            detalhes: dadosTest
        });
        
        // 5. Teste de Web App
        console.log('üåê 5. Verificando Web App...');
        const webAppTest = verificarWebApp();
        relatorio.testes.push({
            nome: 'Web App',
            sucesso: webAppTest.success,
            detalhes: webAppTest
        });
        
        // Resultado Final
        const sucessos = relatorio.testes.filter(t => t.sucesso).length;
        const total = relatorio.testes.length;
        relatorio.sucesso = sucessos >= total * 0.8; // 80% de sucesso
        
        console.log('üìä === RELAT√ìRIO FINAL ===');
        console.log(`‚úÖ Sucessos: ${sucessos}/${total}`);
        console.log(`üéØ Taxa de Sucesso: ${Math.round(sucessos/total*100)}%`);
        console.log(`üìà Status Geral: ${relatorio.sucesso ? '‚úÖ SISTEMA OK' : '‚ö†Ô∏è REQUER ATEN√á√ÉO'}`);
        
        // Recomenda√ß√µes
        if (!relatorio.sucesso) {
            console.log('üîß === RECOMENDA√á√ïES ===');
            relatorio.testes.forEach(teste => {
                if (!teste.sucesso) {
                    console.log(`‚ùå ${teste.nome}: ${teste.detalhes.error || 'Erro'}`);
                    console.log(`üí° Solu√ß√£o: ${gerarSolucao(teste.nome)}`);
                }
            });
        }
        
        return relatorio;
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico no diagn√≥stico:', error);
        return {
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
}

function testarConexaoPlanilha() {
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const sheetCount = spreadsheet.getSheets().length;
        
        return {
            success: true,
            spreadsheetId: spreadsheet.getId(),
            spreadsheetName: spreadsheet.getName(),
            sheetCount: sheetCount,
            url: spreadsheet.getUrl()
        };
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

function verificarEstrutura() {
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const expectedSheets = ['Clientes', 'Compras', 'Parcelas', 'Pagamentos'];
        const existingSheets = spreadsheet.getSheets().map(s => s.getName());
        
        const missing = expectedSheets.filter(name => !existingSheets.includes(name));
        const extra = existingSheets.filter(name => !expectedSheets.includes(name) && name !== 'Planilha1');
        
        return {
            success: missing.length === 0,
            expected: expectedSheets,
            existing: existingSheets,
            missing: missing,
            extra: extra
        };
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

function testarFuncoesPrincipais() {
    const funcoes = [
        'handleLogin',
        'loadClientData', 
        'loadAdminData',
        'createClient',
        'createCredit',
        'getClients',
        'getCredits',
        'markInstallmentAsPaid'
    ];
    
    const resultados = {};
    let sucessos = 0;
    
    funcoes.forEach(funcName => {
        try {
            const funcExists = typeof eval(funcName) === 'function';
            resultados[funcName] = funcExists;
            if (funcExists) sucessos++;
        } catch (error) {
            resultados[funcName] = false;
        }
    });
    
    return {
        success: sucessos === funcoes.length,
        total: funcoes.length,
        sucessos: sucessos,
        detalhes: resultados
    };
}

function verificarDadosExemplo() {
    try {
        const clientsResult = getClients();
        const creditsResult = getCredits();
        
        return {
            success: clientsResult.success && creditsResult.success,
            clientes: clientsResult.clients?.length || 0,
            creditos: creditsResult.credits?.length || 0,
            clientsData: clientsResult.success,
            creditsData: creditsResult.success
        };
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

function verificarWebApp() {
    try {
        // Verificar se as fun√ß√µes do Web App existem
        const doGetExists = typeof doGet === 'function';
        const includeExists = typeof include === 'function';
        
        return {
            success: doGetExists && includeExists,
            doGet: doGetExists,
            include: includeExists,
            url: ScriptApp.getService().getUrl() || 'N√£o implantado'
        };
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

function gerarSolucao(nomeProblema) {
    const solucoes = {
        'Conex√£o Planilha': 'Verifique o SPREADSHEET_ID e permiss√µes da planilha',
        'Estrutura Abas': 'Execute configurarSistemaCompleto() para criar abas',
        'Fun√ß√µes Principais': 'Verifique se todo o c√≥digo backend foi copiado',
        'Dados de Exemplo': 'Execute criarDadosTesteCompletos() para popular dados',
        'Web App': 'Implante como Web App e autorize permiss√µes'
    };
    
    return solucoes[nomeProblema] || 'Verifique logs e documenta√ß√£o';
}

/**
 * ========================================
 * FUN√á√ïES DE CORRE√á√ÉO AUTOM√ÅTICA
 * ========================================
 */

function correcaoAutomatica() {
    console.log('üîß === CORRE√á√ÉO AUTOM√ÅTICA INICIADA ===');
    
    try {
        // 1. Configurar sistema se necess√°rio
        console.log('‚öôÔ∏è Configurando sistema...');
        const configResult = configurarSistemaCompleto();
        
        // 2. Criar dados de teste se vazio
        console.log('üìù Verificando dados de teste...');
        const clientsResult = getClients();
        if (!clientsResult.success || clientsResult.clients.length === 0) {
            console.log('üìä Criando dados de teste...');
            criarDadosTesteCompletos();
        }
        
        // 3. Diagnosticar novamente
        console.log('üîç Diagnosticando ap√≥s corre√ß√µes...');
        const finalDiagnostic = diagnosticoCompleto();
        
        return {
            success: finalDiagnostic.sucesso,
            message: finalDiagnostic.sucesso ? 
                'Sistema corrigido automaticamente!' : 
                'Corre√ß√µes aplicadas, mas requer aten√ß√£o manual',
            diagnostico: finalDiagnostic
        };
        
    } catch (error) {
        console.error('‚ùå Erro na corre√ß√£o autom√°tica:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * ========================================
 * TESTE DE CONECTIVIDADE FRONTEND
 * ========================================
 */

function testarConectividadeFrontend() {
    console.log('üîó === TESTE DE CONECTIVIDADE FRONTEND ===');
    
    const testes = [
        {
            nome: 'Login Admin',
            funcao: () => handleLogin({
                userType: 'admin',
                user: 'admin', 
                password: 'stark2025'
            })
        },
        {
            nome: 'Login Cliente',
            funcao: () => handleLogin({
                userType: 'client',
                identifier: '762.538.452-65',
                password: '2025026'
            })
        },
        {
            nome: 'Carregar Dados Admin',
            funcao: () => loadAdminData()
        },
        {
            nome: 'Carregar Dados Cliente',
            funcao: () => loadClientData('cli001')
        }
    ];
    
    const resultados = [];
    
    testes.forEach(teste => {
        try {
            console.log(`üß™ Testando: ${teste.nome}`);
            const resultado = teste.funcao();
            resultados.push({
                nome: teste.nome,
                sucesso: resultado?.success !== false,
                resultado: resultado
            });
            console.log(`‚úÖ ${teste.nome}: OK`);
        } catch (error) {
            resultados.push({
                nome: teste.nome,
                sucesso: false,
                erro: error.message
            });
            console.log(`‚ùå ${teste.nome}: ${error.message}`);
        }
    });
    
    const sucessos = resultados.filter(r => r.sucesso).length;
    console.log(`üìä Conectividade: ${sucessos}/${testes.length} testes passaram`);
    
    return {
        success: sucessos >= testes.length * 0.75,
        resultados: resultados,
        taxa: sucessos / testes.length
    };
}

/**
 * ========================================
 * VERIFICADOR DE CONFIGURA√á√ÉO WEB APP
 * ========================================
 */

function verificarConfiguracaoWebApp() {
    console.log('üåê === VERIFICANDO CONFIGURA√á√ÉO WEB APP ===');
    
    const config = {
        urlWebApp: ScriptApp.getService().getUrl(),
        triggers: ScriptApp.getProjectTriggers().length,
        permissoes: 'Verificar manualmente',
        funcaoDoGet: typeof doGet === 'function',
        arquivoIndex: verificarArquivoIndex()
    };
    
    console.log('üìã Configura√ß√£o atual:');
    console.log('  üåê URL Web App:', config.urlWebApp || 'N√ÉO IMPLANTADO');
    console.log('  ‚öôÔ∏è Triggers:', config.triggers);
    console.log('  üìÑ Fun√ß√£o doGet:', config.funcaoDoGet ? 'OK' : 'FALTANDO');
    console.log('  üìÅ Arquivo index.html:', config.arquivoIndex ? 'OK' : 'FALTANDO');
    
    const problemas = [];
    if (!config.urlWebApp) problemas.push('Web App n√£o implantado');
    if (!config.funcaoDoGet) problemas.push('Fun√ß√£o doGet n√£o encontrada');
    if (!config.arquivoIndex) problemas.push('Arquivo index.html n√£o encontrado');
    
    if (problemas.length === 0) {
        console.log('‚úÖ Configura√ß√£o Web App OK!');
        console.log(`üîó Acesse: ${config.urlWebApp}`);
    } else {
        console.log('‚ùå Problemas encontrados:');
        problemas.forEach(p => console.log(`  - ${p}`));
    }
    
    return {
        success: problemas.length === 0,
        config: config,
        problemas: problemas
    };
}

function verificarArquivoIndex() {
    try {
        // Tenta incluir o arquivo index.html
        const content = include('index');
        return content && content.length > 100;
    } catch (error) {
        return false;
    }
}

/**
 * ========================================
 * COMANDO √öNICO PARA RESOLVER TUDO
 * ========================================
 */

function resolverTudo() {
    console.log('üöÄ === RESOLVENDO TUDO AUTOMATICAMENTE ===');
    
    try {
        // 1. Diagn√≥stico inicial
        const diagnostico = diagnosticoCompleto();
        
        // 2. Corre√ß√£o autom√°tica
        const correcao = correcaoAutomatica();
        
        // 3. Verificar Web App
        const webApp = verificarConfiguracaoWebApp();
        
        // 4. Teste de conectividade
        const conectividade = testarConectividadeFrontend();
        
        console.log('üéâ === RESOLU√á√ÉO CONCLU√çDA ===');
        
        const tudoOk = diagnostico.sucesso && correcao.success && webApp.success && conectividade.success;
        
        if (tudoOk) {
            console.log('‚úÖ SISTEMA 100% FUNCIONAL!');
            console.log('üîó Acesse seu Web App:', webApp.config.urlWebApp);
            console.log('üë§ Login Admin: admin / stark2025');
            console.log('üë§ Login Cliente: 762.538.452-65 / 2025026');
        } else {
            console.log('‚ö†Ô∏è Sistema funcional com algumas limita√ß√µes');
            console.log('üìã Verifique os problemas listados acima');
        }
        
        return {
            success: tudoOk,
            diagnostico: diagnostico,
            correcao: correcao,
            webApp: webApp,
            conectividade: conectividade
        };
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico:', error);
        return { success: false, error: error.message };
    }
}

/**
 * ========================================
 * LOGS DE INICIALIZA√á√ÉO
 * ========================================
 */

console.log('üîç === DIAGN√ìSTICO CARREGADO ===');
console.log('üöÄ Execute: resolverTudo() - Para resolver todos os problemas');
console.log('üîç Execute: diagnosticoCompleto() - Para diagn√≥stico detalhado');
console.log('üîß Execute: correcaoAutomatica() - Para corre√ß√µes autom√°ticas');
console.log('üåê Execute: verificarConfiguracaoWebApp() - Para verificar Web App');
console.log('üîó Execute: testarConectividadeFrontend() - Para testar conex√µes');
// ===== CRIAR PARCELAS PARA CREDI√ÅRIOS EXISTENTES =====

function criarParcelasParaCrediariosExistentes() {
    console.log('üîß === CRIANDO PARCELAS PARA CREDI√ÅRIOS EXISTENTES ===');
    
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const comprasSheet = spreadsheet.getSheetByName('Compras');
        const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
        
        const comprasData = comprasSheet.getDataRange().getValues();
        const parcelasData = parcelasSheet.getDataRange().getValues();
        
        let parcelasCriadas = 0;
        
        // Para cada credi√°rio, verificar se tem parcelas
        for (let i = 1; i < comprasData.length; i++) {
            const compra = comprasData[i];
            const compraId = compra[0];
            const valorTotal = compra[6];
            const dataCompra = compra[7];
            
            if (!compraId) continue;
            
            // Verificar se j√° tem parcelas
            const parcelasExistentes = parcelasData.filter(row => row[1] === compraId);
            
            if (parcelasExistentes.length === 0) {
                console.log(`üîß Criando parcelas para: ${compra[3]} (${compraId})`);
                
                // Criar parcelas padr√£o (vamos usar 3 parcelas)
                const numeroParcelas = 3;
                const valorParcela = valorTotal / numeroParcelas;
                
                for (let p = 1; p <= numeroParcelas; p++) {
                    const dataVencimento = new Date(dataCompra);
                    dataVencimento.setMonth(dataVencimento.getMonth() + p);
                    
                    const status = p === 1 ? 'Pago' : 'Pendente';
                    const dataPagamento = p === 1 ? new Date() : '';
                    
                    const novaParcela = [
                        generateId(), // ID da parcela
                        compraId, // ID da compra
                        p, // N√∫mero da parcela
                        valorParcela, // Valor
                        dataVencimento, // Data vencimento
                        status, // Status
                        dataPagamento, // Data pagamento
                        '' // Link pagamento
                    ];
                    
                    parcelasSheet.appendRow(novaParcela);
                    parcelasCriadas++;
                    
                    console.log(`  ‚úÖ Parcela ${p}/${numeroParcelas}: R$ ${valorParcela.toFixed(2)} - ${status}`);
                }
            }
        }
        
        console.log(`üéâ ${parcelasCriadas} parcelas criadas!`);
        
        return {
            success: true,
            parcelasCriadas: parcelasCriadas,
            message: `${parcelasCriadas} parcelas foram criadas para os credi√°rios existentes`
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao criar parcelas:', error);
        return { success: false, error: error.message };
    }
}

// ===== CORRE√á√ÉO DA FUN√á√ÉO getCredits =====

function getCreditsCorrigido(clientId = null) {
    console.log(`üí≥ Buscando credi√°rios${clientId ? ' para cliente ' + clientId : ''} [VERS√ÉO CORRIGIDA]...`);
    
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const creditsSheet = spreadsheet.getSheetByName('Compras');
        const installmentsSheet = spreadsheet.getSheetByName('Parcelas');
        
        if (!creditsSheet || !installmentsSheet) {
            console.log('‚ùå Abas de credi√°rios n√£o encontradas');
            return { 
                success: false, 
                error: 'Abas de credi√°rios n√£o encontradas',
                credits: [] 
            };
        }
        
        const creditsData = creditsSheet.getDataRange().getValues();
        const installmentsData = installmentsSheet.getDataRange().getValues();
        
        console.log(`üìä ${creditsData.length - 1} credi√°rios e ${installmentsData.length - 1} parcelas na planilha`);
        
        const credits = [];
        
        for (let i = 1; i < creditsData.length; i++) {
            const creditRow = creditsData[i];
            
            if (!creditRow[0]) continue; // Pular linha vazia
            
            const creditId = String(creditRow[0]);
            
            // Filtrar por cliente se especificado
            if (clientId && creditRow[1] !== clientId) continue;
            
            console.log(`üîç Processando credi√°rio: ${creditId} - ${creditRow[3]}`);
            
            // Buscar parcelas deste credi√°rio
            const creditInstallments = [];
            
            for (let j = 1; j < installmentsData.length; j++) {
                const installmentRow = installmentsData[j];
                
                if (String(installmentRow[1]) === creditId) { // Mesmo Compra_ID
                    const installment = {
                        id: String(installmentRow[0]),
                        number: Number(installmentRow[2] || 0),
                        value: Number(installmentRow[3] || 0),
                        dueDate: formatDateSafe(installmentRow[4]),
                        status: String(installmentRow[5] || 'Pendente'),
                        paymentDate: installmentRow[6] ? formatDateSafe(installmentRow[6]) : null
                    };
                    
                    creditInstallments.push(installment);
                    console.log(`  üìÑ Parcela ${installment.number}: R$ ${installment.value} - ${installment.status}`);
                }
            }
            
            // Ordenar parcelas por n√∫mero
            creditInstallments.sort((a, b) => a.number - b.number);
            
            console.log(`  ‚úÖ ${creditInstallments.length} parcelas encontradas para ${creditId}`);
            
            const credit = {
                id: creditId,
                clientId: String(creditRow[1]),
                clientName: String(creditRow[2] || ''),
                productName: String(creditRow[3] || ''),
                productDescription: String(creditRow[4] || ''),
                productEmoji: String(creditRow[5] || 'üõí'),
                totalValue: Number(creditRow[6] || 0),
                purchaseDate: formatDateSafe(creditRow[7]),
                storeName: String(creditRow[8] || ''),
                storeEmoji: String(creditRow[9] || 'üè¨'),
                status: String(creditRow[10] || 'Ativo'),
                installments: creditInstallments
            };
            
            credits.push(credit);
        }
        
        console.log(`‚úÖ ${credits.length} credi√°rios processados com sucesso`);
        
        return { 
            success: true, 
            credits: credits 
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar credi√°rios corrigido:', error);
        
        return { 
            success: false, 
            error: 'Erro ao buscar credi√°rios: ' + error.message,
            credits: [] 
        };
    }
}

// ===== SUBSTITUIR FUN√á√ÉO ORIGINAL =====

function aplicarCorrecaoGetCredits() {
    console.log('üîÑ Substituindo fun√ß√£o getCredits pela vers√£o corrigida...');
    
    // Fazer backup da fun√ß√£o original
    if (typeof getCredits === 'function') {
        window.getCreditsOriginal = getCredits;
    }
    
    // Substituir pela vers√£o corrigida
    window.getCredits = getCreditsCorrigido;
    
    console.log('‚úÖ Fun√ß√£o getCredits corrigida aplicada');
}

// ===== CORRIGIR FUN√á√ÉO loadClientData =====

function loadClientDataCorrigido(clientId) {
    console.log(`üìä Carregando dados do cliente [VERS√ÉO CORRIGIDA]: ${clientId}`);
    
    try {
        if (!clientId) {
            return {
                success: false,
                error: 'ID do cliente n√£o informado'
            };
        }
        
        // Usar a vers√£o corrigida de getCredits
        const creditsResult = getCreditsCorrigido(clientId);
        
        if (!creditsResult.success) {
            return creditsResult;
        }
        
        const credits = creditsResult.credits || [];
        let totalCredits = credits.length;
        let totalDebt = 0;
        let overdueCount = 0;
        let totalPaid = 0;
        let totalAmount = 0;
        
        const today = new Date();
        
        credits.forEach(credit => {
            console.log(`üìä Processando credi√°rio: ${credit.productName} com ${credit.installments.length} parcelas`);
            
            if (credit.installments) {
                credit.installments.forEach(installment => {
                    totalAmount += Number(installment.value || 0);
                    
                    if (installment.status === 'Pago') {
                        totalPaid += Number(installment.value || 0);
                    } else {
                        totalDebt += Number(installment.value || 0);
                        
                        try {
                            const dueDate = new Date(installment.dueDate);
                            if (dueDate < today) {
                                overdueCount++;
                            }
                        } catch (e) {
                            console.warn('Erro ao processar data de vencimento:', installment.dueDate);
                        }
                    }
                });
            }
        });
        
        const collectionRate = totalAmount > 0 ? Math.round((totalPaid / totalAmount) * 100) : 0;
        
        console.log(`‚úÖ Dados calculados: ${totalCredits} credi√°rios, R$ ${totalDebt} em aberto, ${overdueCount} vencidas`);
        
        return {
            success: true,
            data: {
                totalCredits,
                totalDebt,
                overdueCount,
                totalPaid,
                totalAmount,
                collectionRate,
                credits
            }
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar dados do cliente:', error);
        
        return {
            success: false,
            error: 'Erro ao carregar dados: ' + error.message
        };
    }
}
/**
 * ========================================
 * DIAGN√ìSTICO - PARCELAS PERDIDAS
 * Resolve problema de parcelas n√£o aparecendo
 * ========================================
 */

// ===== DIAGN√ìSTICO ESPEC√çFICO DE PARCELAS PERDIDAS =====

function diagnosticarParcelasPerdidas() {
    console.log('üîç === DIAGN√ìSTICO DE PARCELAS PERDIDAS ===');
    
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const comprasSheet = spreadsheet.getSheetByName('Compras');
        const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
        
        const comprasData = comprasSheet.getDataRange().getValues();
        const parcelasData = parcelasSheet.getDataRange().getValues();
        
        console.log('üìä DIAGN√ìSTICO DETALHADO:');
        
        // Buscar especificamente o Dentes_Gulherme
        let compraGulherme = null;
        let linhaCompra = -1;
        
        for (let i = 1; i < comprasData.length; i++) {
            if (comprasData[i][3] && comprasData[i][3].includes('Dentes_Gulherme')) {
                compraGulherme = comprasData[i];
                linhaCompra = i + 1;
                break;
            }
        }
        
        if (!compraGulherme) {
            console.log('‚ùå Compra Dentes_Gulherme n√£o encontrada');
            return { success: false, error: 'Compra n√£o encontrada' };
        }
        
        const compraId = compraGulherme[0];
        console.log(`üéØ COMPRA ENCONTRADA:`);
        console.log(`  üÜî ID: ${compraId}`);
        console.log(`  üìç Linha na planilha: ${linhaCompra}`);
        console.log(`  üë§ Cliente: ${compraGulherme[2]}`);
        console.log(`  üõçÔ∏è Produto: ${compraGulherme[3]}`);
        console.log(`  üí∞ Valor: R$ ${compraGulherme[6]}`);
        
        // Buscar TODAS as parcelas desta compra
        console.log(`\nüîç BUSCANDO PARCELAS COM ID: ${compraId}`);
        const parcelasEncontradas = [];
        
        for (let j = 1; j < parcelasData.length; j++) {
            const parcelaRow = parcelasData[j];
            
            // Debug detalhado de cada linha
            console.log(`  üìÑ Linha ${j + 1}: ID_Compra="${parcelaRow[1]}" | N√∫mero="${parcelaRow[2]}" | Valor="${parcelaRow[3]}"`);
            
            // Verificar correspond√™ncia exata
            if (String(parcelaRow[1]).trim() === String(compraId).trim()) {
                parcelasEncontradas.push({
                    linha: j + 1,
                    id: parcelaRow[0],
                    compraId: parcelaRow[1],
                    numero: parcelaRow[2],
                    valor: parcelaRow[3],
                    vencimento: parcelaRow[4],
                    status: parcelaRow[5],
                    pagamento: parcelaRow[6]
                });
                
                console.log(`    ‚úÖ MATCH! Parcela ${parcelaRow[2]} encontrada`);
            } else {
                console.log(`    ‚ùå No match: "${parcelaRow[1]}" !== "${compraId}"`);
            }
        }
        
        console.log(`\nüìä RESULTADO:`);
        console.log(`  üéØ Parcelas encontradas: ${parcelasEncontradas.length}`);
        console.log(`  üìã DETALHES DAS PARCELAS:`);
        
        parcelasEncontradas.forEach(parcela => {
            console.log(`    ${parcela.numero}. R$ ${parcela.valor} - ${parcela.status} (linha ${parcela.linha})`);
        });
        
        // Verificar se h√° problemas de tipo ou formata√ß√£o
        console.log(`\nüîç AN√ÅLISE DE TIPOS:`);
        console.log(`  üÜî Tipo do ID da compra: ${typeof compraId}`);
        console.log(`  üìù Valor do ID da compra: "${compraId}"`);
        console.log(`  üìè Tamanho do ID: ${String(compraId).length}`);
        
        return {
            success: true,
            compraId: compraId,
            parcelasEncontradas: parcelasEncontradas.length,
            parcelas: parcelasEncontradas
        };
        
    } catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error);
        return { success: false, error: error.message };
    }
}

// ===== VERIFICAR TODAS AS PARCELAS DA PLANILHA =====

function listarTodasAsParcelasDaPlanilha() {
    console.log('üìã === LISTANDO TODAS AS PARCELAS DA PLANILHA ===');
    
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
        const parcelasData = parcelasSheet.getDataRange().getValues();
        
        console.log(`üìä Total de linhas na aba Parcelas: ${parcelasData.length}`);
        console.log(`üìä Headers: ${parcelasData[0].join(' | ')}`);
        
        console.log('\nüìã TODAS AS PARCELAS:');
        
        for (let i = 1; i < parcelasData.length; i++) {
            const row = parcelasData[i];
            if (row[0]) { // Se tem ID
                console.log(`${i}. ID: ${row[0]} | Compra: ${row[1]} | N¬∫: ${row[2]} | Valor: R$ ${row[3]} | Status: ${row[5]}`);
                
                // Destacar parcelas do Dentes_Gulherme
                if (String(row[1]).includes('mdclxros01ein0lxap0e') || 
                    (row[1] && String(row[1]).trim().length > 10)) {
                    console.log(`    ü¶∑ *** POSS√çVEL PARCELA DENTES_GULHERME ***`);
                }
            }
        }
        
        return { success: true, totalParcelas: parcelasData.length - 1 };
        
    } catch (error) {
        console.error('‚ùå Erro ao listar parcelas:', error);
        return { success: false, error: error.message };
    }
}

// ===== BUSCAR PARCELAS COM FILTRO FLEX√çVEL =====

function buscarParcelasFlexivel(termoBusca) {
    console.log(`üîç Buscando parcelas com termo: "${termoBusca}"`);
    
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const comprasSheet = spreadsheet.getSheetByName('Compras');
        const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
        
        const comprasData = comprasSheet.getDataRange().getValues();
        const parcelasData = parcelasSheet.getDataRange().getValues();
        
        // Buscar compras que contenham o termo
        const comprasEncontradas = [];
        
        for (let i = 1; i < comprasData.length; i++) {
            const compra = comprasData[i];
            if (compra[3] && compra[3].toLowerCase().includes(termoBusca.toLowerCase())) {
                comprasEncontradas.push({
                    linha: i + 1,
                    id: compra[0],
                    cliente: compra[2],
                    produto: compra[3],
                    valor: compra[6]
                });
            }
        }
        
        console.log(`üì¶ Compras encontradas: ${comprasEncontradas.length}`);
        
        // Para cada compra, buscar suas parcelas
        comprasEncontradas.forEach(compra => {
            console.log(`\nüéØ ${compra.produto} (${compra.id}):`);
            
            const parcelas = [];
            
            // Busca com diferentes crit√©rios
            for (let j = 1; j < parcelasData.length; j++) {
                const parcela = parcelasData[j];
                
                // Crit√©rio 1: ID exato
                if (String(parcela[1]) === String(compra.id)) {
                    parcelas.push({ tipo: 'ID_EXATO', linha: j + 1, dados: parcela });
                }
                // Crit√©rio 2: ID cont√©m
                else if (String(parcela[1]).includes(String(compra.id))) {
                    parcelas.push({ tipo: 'ID_CONTEM', linha: j + 1, dados: parcela });
                }
                // Crit√©rio 3: Compra ID cont√©m parcela ID
                else if (String(compra.id).includes(String(parcela[1]))) {
                    parcelas.push({ tipo: 'COMPRA_CONTEM', linha: j + 1, dados: parcela });
                }
            }
            
            console.log(`  üìä Parcelas encontradas: ${parcelas.length}`);
            
            parcelas.forEach(parcela => {
                console.log(`    ${parcela.tipo}: Linha ${parcela.linha} | N¬∫ ${parcela.dados[2]} | R$ ${parcela.dados[3]} | ${parcela.dados[5]}`);
            });
        });
        
        return { success: true, comprasEncontradas };
        
    } catch (error) {
        console.error('‚ùå Erro na busca flex√≠vel:', error);
        return { success: false, error: error.message };
    }
}

// ===== CORRIGIR VINCULA√á√ÉO DE PARCELAS =====

function corrigirVinculacaoParcelas() {
    console.log('üîß === CORRIGINDO VINCULA√á√ÉO DE PARCELAS ===');
    
    try {
        const spreadsheet = getOrCreateSpreadsheet();
        const comprasSheet = spreadsheet.getSheetByName('Compras');
        const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
        
        const comprasData = comprasSheet.getDataRange().getValues();
        const parcelasData = parcelasSheet.getDataRange().getValues();
        
        let correcoes = 0;
        
        // Para cada compra, verificar se suas parcelas est√£o corretas
        for (let i = 1; i < comprasData.length; i++) {
            const compra = comprasData[i];
            const compraId = compra[0];
            const produtoNome = compra[3];
            
            if (!compraId) continue;
            
            // Buscar parcelas que deveriam estar vinculadas
            const parcelasVinculadas = [];
            const parcelasPossiveis = [];
            
            for (let j = 1; j < parcelasData.length; j++) {
                const parcela = parcelasData[j];
                
                // Parcelas j√° vinculadas corretamente
                if (String(parcela[1]) === String(compraId)) {
                    parcelasVinculadas.push({ linha: j + 1, dados: parcela });
                }
                // Parcelas que podem estar mal vinculadas
                else if (!parcela[1] || parcela[1] === '' || String(parcela[1]).length < 5) {
                    parcelasPossiveis.push({ linha: j + 1, dados: parcela });
                }
            }
            
            console.log(`üîç ${produtoNome}:`);
            console.log(`  ‚úÖ Parcelas vinculadas: ${parcelasVinculadas.length}`);
            console.log(`  ‚ùì Parcelas n√£o vinculadas: ${parcelasPossiveis.length}`);
            
            // Se tem menos de 3 parcelas vinculadas e h√° parcelas n√£o vinculadas
            if (parcelasVinculadas.length < 3 && parcelasPossiveis.length > 0) {
                console.log(`  üîß Tentando corrigir vincula√ß√£o...`);
                
                // Vincular parcelas n√£o vinculadas a esta compra
                const parcelasParaVincular = parcelasPossiveis.slice(0, 4 - parcelasVinculadas.length);
                
                parcelasParaVincular.forEach((parcela, index) => {
                    const novoNumero = parcelasVinculadas.length + index + 1;
                    
                    // Atualizar na planilha
                    parcelasSheet.getRange(parcela.linha, 2).setValue(compraId); // Compra_ID
                    parcelasSheet.getRange(parcela.linha, 3).setValue(novoNumero); // N√∫mero da parcela
                    
                    console.log(`    ‚úÖ Parcela linha ${parcela.linha} vinculada como parcela ${novoNumero}`);
                    correcoes++;
                });
            }
        }
        
        console.log(`üéâ ${correcoes} corre√ß√µes de vincula√ß√£o realizadas!`);
        
        return {
            success: true,
            correcoes: correcoes,
            message: `${correcoes} parcelas foram revinculadas`
        };
        
    } catch (error) {
        console.error('‚ùå Erro na corre√ß√£o de vincula√ß√£o:', error);
        return { success: false, error: error.message };
    }
}

// ===== FUN√á√ÉO PRINCIPAL PARA RESOLVER PARCELAS PERDIDAS =====

function resolverParcelasPerdidas() {
    console.log('üöÄ === RESOLVENDO PARCELAS PERDIDAS ===');
    
    const relatorio = {
        diagnostico: null,
        listagem: null,
        correcao: null,
        verificacaoFinal: null
    };
    
    try {
        // 1. Diagn√≥stico espec√≠fico
        console.log('1Ô∏è‚É£ Diagn√≥stico espec√≠fico do Dentes_Gulherme...');
        relatorio.diagnostico = diagnosticarParcelasPerdidas();
        
        // 2. Listagem completa
        console.log('\n2Ô∏è‚É£ Listando todas as parcelas...');
        relatorio.listagem = listarTodasAsParcelasDaPlanilha();
        
        // 3. Busca flex√≠vel
        console.log('\n3Ô∏è‚É£ Busca flex√≠vel...');
        buscarParcelasFlexivel('Dentes');
        
        // 4. Corre√ß√£o de vincula√ß√£o
        console.log('\n4Ô∏è‚É£ Corrigindo vincula√ß√µes...');
        relatorio.correcao = corrigirVinculacaoParcelas();
        
        // 5. Verifica√ß√£o final
        console.log('\n5Ô∏è‚É£ Verifica√ß√£o final...');
        relatorio.verificacaoFinal = diagnosticarParcelasPerdidas();
        
        console.log('\nüìä === RELAT√ìRIO FINAL ===');
        
        if (relatorio.diagnostico.success) {
            const antes = relatorio.diagnostico.parcelasEncontradas;
            const depois = relatorio.verificacaoFinal.parcelasEncontradas;
            
            console.log(`üìà Parcelas antes: ${antes}`);
            console.log(`üìà Parcelas depois: ${depois}`);
            console.log(`‚úÖ Melhoria: ${depois > antes ? 'SIM' : 'N√ÉO'}`);
        }
        
        if (relatorio.correcao.success && relatorio.correcao.correcoes > 0) {
            console.log('üéâ === CORRE√á√ÉO BEM-SUCEDIDA ===');
            console.log('üîÑ Recarregue o sistema para ver todas as 4 parcelas!');
        } else {
            console.log('‚ö†Ô∏è === INVESTIGA√á√ÉO NECESS√ÅRIA ===');
            console.log('Pode ser necess√°rio corre√ß√£o manual');
        }
        
        return relatorio;
        
    } catch (error) {
        console.error('‚ùå Erro na resolu√ß√£o:', error);
        return { success: false, error: error.message };
    }
}

// ===== FUN√á√ÉO ESPEC√çFICA PARA DENTES_GULHERME =====

function corrigirDentesGulhermeEspecifico() {
    console.log('ü¶∑ === CORRE√á√ÉO ESPEC√çFICA DENTES_GULHERME ===');
    
    try {
        // Buscar a compra espec√≠fica
        const spreadsheet = getOrCreateSpreadsheet();
        const comprasSheet = spreadsheet.getSheetByName('Compras');
        const comprasData = comprasSheet.getDataRange().getValues();
        
        let compraGulherme = null;
        for (let i = 1; i < comprasData.length; i++) {
            if (comprasData[i][3] && comprasData[i][3].includes('Dentes_Gulherme')) {
                compraGulherme = comprasData[i];
                break;
            }
        }
        
        if (!compraGulherme) {
            return { success: false, error: 'Compra Dentes_Gulherme n√£o encontrada' };
        }
        
        const compraId = compraGulherme[0];
        const valorTotal = 1110.00; // Valor correto
        
        console.log(`üéØ Recriando 4 parcelas para ${compraId} no valor de R$ ${valorTotal}`);
        
        // Remover parcelas existentes e criar 4 novas
        const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
        const parcelasData = parcelasSheet.getDataRange().getValues();
        
        // Remover parcelas antigas
        for (let i = parcelasData.length - 1; i >= 1; i--) {
            if (String(parcelasData[i][1]).includes(compraId)) {
                parcelasSheet.deleteRow(i + 1);
                console.log(`üóëÔ∏è Removida parcela linha ${i + 1}`);
            }
        }
        
        // Criar 4 parcelas novas
        const valorPorParcela = valorTotal / 4; // R$ 277,50
        const dataBase = new Date();
        
        for (let p = 1; p <= 4; p++) {
            const dataVencimento = new Date(dataBase);
            dataVencimento.setMonth(dataVencimento.getMonth() + p);
            
            const status = p === 1 ? 'Pago' : 'Pendente';
            const dataPagamento = p === 1 ? new Date() : '';
            
            const novaParcela = [
                generateId(),
                compraId,
                p,
                valorPorParcela,
                dataVencimento,
                status,
                dataPagamento,
                ''
            ];
            
            parcelasSheet.appendRow(novaParcela);
            console.log(`‚úÖ Parcela ${p}/4: R$ ${valorPorParcela.toFixed(2)} - ${status}`);
        }
        
        console.log('üéâ 4 parcelas criadas com sucesso!');
        
        return {
            success: true,
            message: '4 parcelas criadas para Dentes_Gulherme',
            valorPorParcela: valorPorParcela
        };
        
    } catch (error) {
        console.error('‚ùå Erro na corre√ß√£o espec√≠fica:', error);
        return { success: false, error: error.message };
    }
}

// ===== LOGS E FUN√á√ïES AUXILIARES =====

function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

console.log('üîç === DIAGN√ìSTICO DE PARCELAS PERDIDAS CARREGADO ===');
console.log('üöÄ Execute: resolverParcelasPerdidas()');
console.log('üîç Execute: diagnosticarParcelasPerdidas()');
console.log('üìã Execute: listarTodasAsParcelasDaPlanilha()');
console.log('ü¶∑ Execute: corrigirDentesGulhermeEspecifico()');
console.log('');
console.log('üí° Esta corre√ß√£o vai:');
console.log('1. Encontrar parcelas que existem mas n√£o aparecem');
console.log('2. Corrigir vincula√ß√µes entre compras e parcelas');
console.log('3. Garantir que todas as 4 parcelas sejam exibidas');
console.log('4. Recalcular valores corretos (R$ 1.110 √∑ 4 = R$ 277,50)');
/**
 * ========================================
 * SCRIPT DE CONFIGURA√á√ÉO AUTOM√ÅTICA
 * Resolve todos os problemas de comunica√ß√£o
 * ========================================
 */

function configuracaoAutomaticaCompleta() {
    console.log('üöÄ === CONFIGURA√á√ÉO AUTOM√ÅTICA INICIADA ===');
    
    const relatorio = {
        etapas: [],
        erros: [],
        sucesso: false,
        detalhes: {}
    };
    
    try {
        // Etapa 1: Verificar/Configurar Planilha
        console.log('üìä Etapa 1: Configurando planilha...');
        const planilhaResult = configurarPlanilhaAutomatica();
        relatorio.etapas.push({
            etapa: 'Planilha',
            sucesso: planilhaResult.success,
            detalhes: planilhaResult
        });
        
        if (!planilhaResult.success) {
            relatorio.erros.push('Falha na configura√ß√£o da planilha');
        }
        
        // Etapa 2: Configurar Dados de Teste
        console.log('üß™ Etapa 2: Criando dados de teste...');
        const dadosResult = criarDadosTesteCompletos();
        relatorio.etapas.push({
            etapa: 'Dados de Teste',
            sucesso: dadosResult.success,
            detalhes: dadosResult
        });
        
        // Etapa 3: Testar Todas as Fun√ß√µes
        console.log('üîß Etapa 3: Testando fun√ß√µes...');
        const testesResult = executarTodosTestes();
        relatorio.etapas.push({
            etapa: 'Testes',
            sucesso: testesResult.success,
            detalhes: testesResult
        });
        
        // Etapa 4: Configurar Triggers e Permiss√µes
        console.log('‚öôÔ∏è Etapa 4: Configurando triggers...');
        const triggersResult = configurarTriggers();
        relatorio.etapas.push({
            etapa: 'Triggers',
            sucesso: triggersResult.success,
            detalhes: triggersResult
        });
        
        // Etapa 5: Valida√ß√£o Final
        console.log('‚úÖ Etapa 5: Valida√ß√£o final...');
        const validacaoResult = validacaoFinalCompleta();
        relatorio.etapas.push({
            etapa: 'Valida√ß√£o',
            sucesso: validacaoResult.success,
            detalhes: validacaoResult
        });
        
        // Determinar sucesso geral
        relatorio.sucesso = relatorio.etapas.every(etapa => etapa.sucesso);
        
        // Logs finais
        if (relatorio.sucesso) {
            console.log('üéâ === CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO ===');
            relatorio.detalhes.webAppUrl = gerarInstrucoesWebApp();
            relatorio.detalhes.credenciaisLogin = obterCredenciaisLogin();
        } else {
            console.log('‚ùå === CONFIGURA√á√ÉO CONCLU√çDA COM PROBLEMAS ===');
            relatorio.detalhes.solucoes = gerarSolucoesProblemass(relatorio.erros);
        }
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico na configura√ß√£o:', error);
        relatorio.erros.push('Erro cr√≠tico: ' + error.message);
        relatorio.sucesso = false;
    }
    
    // Exibir relat√≥rio completo
    exibirRelatorioFinal(relatorio);
    
    return relatorio;
}

// ===== CONFIGURA√á√ÉO DA PLANILHA =====

function configurarPlanilhaAutomatica() {
    try {
        console.log('üìä Configurando planilha automaticamente...');
        
        let spreadsheet;
        
        // Tentar abrir planilha existente
        try {
            spreadsheet = SpreadsheetApp.openById('1RAd3dzwJqaye8Czfv6-BhbFrh_dgvJKZMgc_K6v1-EU');
            console.log('‚úÖ Planilha existente encontrada:', spreadsheet.getName());
        } catch (error) {
            // Criar nova planilha
            console.log('üîß Criando nova planilha...');
            spreadsheet = SpreadsheetApp.create('StarkTech - Sistema de Credi√°rio');
            console.log('‚úÖ Nova planilha criada:', spreadsheet.getId());
            console.log('‚ö†Ô∏è  IMPORTANTE: Atualize o SPREADSHEET_ID para:', spreadsheet.getId());
        }
        
        // Configurar estrutura
        const estruturaResult = configurarEstruturaPlanilha(spreadsheet);
        
        return {
            success: true,
            spreadsheetId: spreadsheet.getId(),
            spreadsheetName: spreadsheet.getName(),
            spreadsheetUrl: spreadsheet.getUrl(),
            estrutura: estruturaResult
        };
        
    } catch (error) {
        console.error('‚ùå Erro na configura√ß√£o da planilha:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

function configurarEstruturaPlanilha(spreadsheet) {
    const resultados = {};
    
    // Definir abas necess√°rias
    const abasNecessarias = {
        'Clientes': ['ID', 'Nome', 'CPF', 'Email', 'Telefone', 'Senha', 'Data_Cadastro'],
        'Compras': ['ID', 'Cliente_ID', 'Cliente_Nome', 'Produto_Nome', 'Produto_Descricao', 'Produto_Emoji', 'Valor_Total', 'Data_Compra', 'Loja_Nome', 'Loja_Emoji', 'Status'],
        'Parcelas': ['ID', 'Compra_ID', 'Numero', 'Valor', 'Data_Vencimento', 'Status', 'Data_Pagamento', 'Link_Pagamento'],
        'Pagamentos': ['ID', 'Parcela_ID', 'Compra_ID', 'Valor', 'Data_Pagamento', 'Metodo']
    };
    
    // Remover planilha padr√£o se existir
    try {
        const defaultSheet = spreadsheet.getSheetByName('Planilha1');
        if (defaultSheet && spreadsheet.getSheets().length > 1) {
            spreadsheet.deleteSheet(defaultSheet);
            console.log('‚úÖ Planilha padr√£o removida');
        }
    } catch (e) {
        // Ignorar se n√£o existir
    }
    
    // Criar/configurar cada aba
    Object.entries(abasNecessarias).forEach(([nomeAba, headers]) => {
        try {
            let sheet = spreadsheet.getSheetByName(nomeAba);
            
            if (!sheet) {
                sheet = spreadsheet.insertSheet(nomeAba);
                console.log(`‚úÖ Aba criada: ${nomeAba}`);
            }
            
            // Configurar headers se a aba estiver vazia
            if (sheet.getLastRow() <= 1) {
                sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
                sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
                sheet.getRange(1, 1, 1, headers.length).setBackground('#E3F2FD');
                
                // Auto-redimensionar colunas
                sheet.autoResizeColumns(1, headers.length);
                
                console.log(`‚úÖ Headers configurados para ${nomeAba}`);
            }
            
            resultados[nomeAba] = {
                success: true,
                rows: sheet.getLastRow(),
                cols: sheet.getLastColumn()
            };
            
        } catch (error) {
            console.error(`‚ùå Erro na aba ${nomeAba}:`, error);
            resultados[nomeAba] = {
                success: false,
                error: error.message
            };
        }
    });
    
    return resultados;
}

// ===== DADOS DE TESTE =====

function criarDadosTesteCompletos() {
    try {
        console.log('üß™ Criando dados de teste completos...');
        
        const spreadsheet = getOrCreateSpreadsheet();
        const clientsSheet = spreadsheet.getSheetByName('Clientes');
        const creditsSheet = spreadsheet.getSheetByName('Compras');
        const installmentsSheet = spreadsheet.getSheetByName('Parcelas');
        
        const resultados = {};
        
        // Verificar se j√° existem dados
        if (clientsSheet.getLastRow() > 1) {
            console.log('‚ö†Ô∏è Dados de teste j√° existem, pulando cria√ß√£o');
            return {
                success: true,
                message: 'Dados de teste j√° existem',
                clientesExistentes: clientsSheet.getLastRow() - 1
            };
        }
        
        // Criar clientes de teste
        const clientesTeste = [
            ['cli001', 'Jackeline Duarte', '762.538.452-65', 'duarte@gmail.com', '(62) 99999-1111', '2025026', new Date()],
            ['cli002', 'Sr¬∞White & Wanderson', '123.456.789-00', 'wanderson@email.com', '(62) 99999-2222', '123456', new Date()],
            ['cli003', 'Maria Silva', '987.654.321-00', 'maria@email.com', '(62) 99999-3333', 'senha123', new Date()],
            ['cli004', 'Jo√£o Santos', '111.222.333-44', 'joao@email.com', '(62) 99999-4444', '123456', new Date()],
            ['cli005', 'Ana Costa', '555.666.777-88', 'ana@email.com', '(62) 99999-5555', '123456', new Date()]
        ];
        
        clientesTeste.forEach(cliente => {
            clientsSheet.appendRow(cliente);
        });
        
        resultados.clientes = {
            success: true,
            quantidade: clientesTeste.length
        };
        
        console.log(`‚úÖ ${clientesTeste.length} clientes de teste criados`);
        
        // Criar credi√°rios de teste
        const creditosTeste = [
            ['cred001', 'cli001', 'Jackeline Duarte', 'Kit Maquiagem Natura Una', 'Kit completo com batom, base e p√≥', 'üíÑ', 420.00, '2025-01-10', 'Loja Natura', 'üåø', 'Ativo'],
            ['cred002', 'cli001', 'Jackeline Duarte', 'Perfume Kaiak Feminino', 'Kaiak Feminino 100ml', 'üå∏', 280.00, '2025-01-20', 'Loja Natura', 'üåø', 'Ativo'],
            ['cred003', 'cli002', 'Sr¬∞White & Wanderson', 'Kit Presente Egeo', 'Egeo Blue + Desodorante + Gel', 'üéÅ', 300.00, '2025-01-15', 'Sr¬∞White Store', 'üè¨', 'Ativo'],
            ['cred004', 'cli003', 'Maria Silva', 'Smartphone Galaxy A14', 'Galaxy A14 4G 128GB Preto', 'üì±', 600.00, '2024-12-01', 'TechShop', 'üè™', 'Ativo'],
            ['cred005', 'cli004', 'Jo√£o Santos', 'Notebook Lenovo', 'Lenovo IdeaPad 3 Intel i5', 'üíª', 2500.00, '2025-01-05', 'TechWorld', 'üñ•Ô∏è', 'Ativo']
        ];
        
        creditosTeste.forEach(credito => {
            creditsSheet.appendRow(credito);
        });
        
        resultados.creditos = {
            success: true,
            quantidade: creditosTeste.length
        };
        
        console.log(`‚úÖ ${creditosTeste.length} credi√°rios de teste criados`);
        
        // Criar parcelas de teste
        let parcelasCount = 0;
        
        // Parcelas para Jackeline (cred001 - 3 parcelas)
        const parcelasJackeline1 = [
            ['inst001', 'cred001', 1, 140.00, '2025-02-10', 'Pago', '2025-02-08', ''],
            ['inst002', 'cred001', 2, 140.00, '2025-03-10', 'Pago', '2025-03-05', ''],
            ['inst003', 'cred001', 3, 140.00, '2025-04-10', 'Pendente', '', '']
        ];
        
        // Parcelas para Jackeline (cred002 - 2 parcelas)
        const parcelasJackeline2 = [
            ['inst004', 'cred002', 1, 140.00, '2025-02-20', 'Pago', '2025-02-18', ''],
            ['inst005', 'cred002', 2, 140.00, '2025-03-20', 'Pendente', '', '']
        ];
        
        // Parcelas para Sr¬∞White (cred003 - 2 parcelas)
        const parcelasSrWhite = [
            ['inst006', 'cred003', 1, 150.00, '2025-02-15', 'Pago', '2025-02-12', ''],
            ['inst007', 'cred003', 2, 150.00, '2025-03-15', 'Pendente', '', '']
        ];
        
        // Parcelas para Maria (cred004 - 5 parcelas)
        const parcelasMaria = [
            ['inst008', 'cred004', 1, 120.00, '2025-01-01', 'Pago', '2024-12-30', ''],
            ['inst009', 'cred004', 2, 120.00, '2025-02-01', 'Pago', '2025-01-28', ''],
            ['inst010', 'cred004', 3, 120.00, '2025-03-01', 'Pago', '2025-02-25', ''],
            ['inst011', 'cred004', 4, 120.00, '2025-04-01', 'Pago', '2025-03-28', ''],
            ['inst012', 'cred004', 5, 120.00, '2025-05-01', 'Pendente', '', '']
        ];
        
        // Parcelas para Jo√£o (cred005 - 10 parcelas)
        const parcelasJoao = [];
        for (let i = 1; i <= 10; i++) {
            const dueDate = new Date('2025-02-05');
            dueDate.setMonth(dueDate.getMonth() + (i - 1));
            
            const status = i <= 2 ? 'Pago' : 'Pendente';
            const paymentDate = i <= 2 ? new Date(dueDate.getTime() - 2 * 24 * 60 * 60 * 1000) : '';
            
            parcelasJoao.push([
                `inst${String(12 + i).padStart(3, '0')}`,
                'cred005',
                i,
                250.00,
                dueDate,
                status,
                paymentDate,
                ''
            ]);
        }
        
        // Adicionar todas as parcelas
        const todasParcelas = [
            ...parcelasJackeline1,
            ...parcelasJackeline2,
            ...parcelasSrWhite,
            ...parcelasMaria,
            ...parcelasJoao
        ];
        
        todasParcelas.forEach(parcela => {
            installmentsSheet.appendRow(parcela);
            parcelasCount++;
        });
        
        resultados.parcelas = {
            success: true,
            quantidade: parcelasCount
        };
        
        console.log(`‚úÖ ${parcelasCount} parcelas de teste criadas`);
        
        return {
            success: true,
            message: 'Dados de teste criados com sucesso',
            detalhes: resultados
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao criar dados de teste:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// ===== TESTES COMPLETOS =====

function executarTodosTestes() {
    try {
        console.log('üîß Executando todos os testes...');
        
        const resultados = {};
        
        // Teste 1: Conex√£o
        console.log('üß™ Teste 1: Conex√£o...');
        resultados.conexao = testConnection();
        
        // Teste 2: Login Admin
        console.log('üß™ Teste 2: Login Admin...');
        resultados.loginAdmin = handleLogin({
            userType: 'admin',
            user: 'admin',
            password: 'stark2025'
        });
        
        // Teste 3: Login Cliente (Jackeline)
        console.log('üß™ Teste 3: Login Cliente (Jackeline)...');
        resultados.loginClienteJackeline = handleLogin({
            userType: 'client',
            identifier: '762.538.452-65',
            password: '2025026'
        });
        
        // Teste 4: Login Cliente por Email
        console.log('üß™ Teste 4: Login por Email...');
        resultados.loginPorEmail = handleLogin({
            userType: 'client',
            identifier: 'duarte@gmail.com',
            password: '2025026'
        });
        
        // Teste 5: Buscar Clientes
        console.log('üß™ Teste 5: Buscar Clientes...');
        resultados.buscarClientes = getClients();
        
        // Teste 6: Buscar Credi√°rios
        console.log('üß™ Teste 6: Buscar Credi√°rios...');
        resultados.buscarCreditos = getCredits();
        
        // Teste 7: Dados do Cliente Jackeline
        console.log('üß™ Teste 7: Dados Cliente Jackeline...');
        resultados.dadosClienteJackeline = loadClientData('cli001');
        
        // Teste 8: Dados Admin
        console.log('üß™ Teste 8: Dados Admin...');
        resultados.dadosAdmin = loadAdminData();
        
        // Teste 9: URLs de Pagamento
        console.log('üß™ Teste 9: URLs de Pagamento...');
        resultados.urlsPagamento = {
            parcela1: getPaymentUrlByProduct('cred001', 1),
            parcela2: getPaymentUrlByProduct('cred001', 2),
            parcela3: getPaymentUrlByProduct('cred002', 1)
        };
        
        // Avaliar resultados
        const sucessos = Object.values(resultados).filter(r => r?.success === true).length;
        const total = Object.keys(resultados).length;
        
        console.log(`‚úÖ Testes conclu√≠dos: ${sucessos}/${total} sucessos`);
        
        return {
            success: sucessos >= total * 0.8, // 80% de sucesso m√≠nimo
            sucessos: sucessos,
            total: total,
            detalhes: resultados
        };
        
    } catch (error) {
        console.error('‚ùå Erro nos testes:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// ===== CONFIGURAR TRIGGERS =====

function configurarTriggers() {
    try {
        console.log('‚öôÔ∏è Configurando triggers...');
        
        // Limpar triggers existentes
        const existingTriggers = ScriptApp.getProjectTriggers();
        existingTriggers.forEach(trigger => {
            ScriptApp.deleteTrigger(trigger);
        });
        
        console.log(`üóëÔ∏è ${existingTriggers.length} triggers antigos removidos`);
        
        // Opcional: Criar triggers para backup autom√°tico
        // (Descomente se necess√°rio)
        /*
        ScriptApp.newTrigger('backupAutomatico')
            .timeBased()
            .everyDays(1)
            .atHour(2)
            .create();
        
        console.log('‚úÖ Trigger de backup criado');
        */
        
        return {
            success: true,
            message: 'Triggers configurados',
            triggersRemovidos: existingTriggers.length
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao configurar triggers:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// ===== VALIDA√á√ÉO FINAL =====

function validacaoFinalCompleta() {
    try {
        console.log('‚úÖ Executando valida√ß√£o final...');
        
        const validacao = {
            planilha: false,
            dados: false,
            funcoes: false,
            webApp: false
        };
        
        // Validar planilha
        try {
            const spreadsheet = getOrCreateSpreadsheet();
            const sheets = spreadsheet.getSheets();
            validacao.planilha = sheets.length >= 4;
            console.log(`‚úÖ Planilha: ${sheets.length} abas encontradas`);
        } catch (e) {
            console.log('‚ùå Planilha: Erro ao acessar');
        }
        
        // Validar dados
        try {
            const clients = getClients();
            validacao.dados = clients.success && clients.clients.length > 0;
            console.log(`‚úÖ Dados: ${clients.clients?.length || 0} clientes encontrados`);
        } catch (e) {
            console.log('‚ùå Dados: Erro ao acessar');
        }
        
        // Validar fun√ß√µes
        try {
            const testResult = testConnection();
            validacao.funcoes = testResult.success;
            console.log(`‚úÖ Fun√ß√µes: ${testResult.success ? 'OK' : 'Erro'}`);
        } catch (e) {
            console.log('‚ùå Fun√ß√µes: Erro ao testar');
        }
        
        // Validar Web App (indiretamente)
        validacao.webApp = true; // Se chegou at√© aqui, o script est√° rodando
        
        const sucessoTotal = Object.values(validacao).every(v => v === true);
        
        return {
            success: sucessoTotal,
            detalhes: validacao,
            percentualSucesso: (Object.values(validacao).filter(v => v).length / 4) * 100
        };
        
    } catch (error) {
        console.error('‚ùå Erro na valida√ß√£o final:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// ===== FUN√á√ïES AUXILIARES =====

function gerarInstrucoesWebApp() {
    const webAppUrl = ScriptApp.getService().getUrl();
    
    return {
        url: webAppUrl || 'Execute: Implantar ‚Üí Nova implanta√ß√£o',
        instrucoes: [
            '1. Clique em "Implantar" ‚Üí "Nova implanta√ß√£o"',
            '2. Tipo: "Aplicativo da Web"',
            '3. Executar como: "Eu"',
            '4. Quem tem acesso: "Qualquer pessoa"',
            '5. Clique em "Implantar"',
            '6. Copie a URL do Web App'
        ]
    };
}

function obterCredenciaisLogin() {
    return {
        admin: {
            usuario: 'admin',
            senha: 'stark2025'
        },
        clientes: [
            { nome: 'Jackeline Duarte', cpf: '762.538.452-65', senha: '2025026' },
            { nome: 'Sr¬∞White', cpf: '123.456.789-00', senha: '123456' },
            { nome: 'Maria Silva', cpf: '987.654.321-00', senha: 'senha123' }
        ]
    };
}

function gerarSolucoesProblemass(erros) {
    const solucoes = [];
    
    erros.forEach(erro => {
        if (erro.includes('planilha')) {
            solucoes.push({
                problema: 'Erro na planilha',
                solucao: 'Execute: configurarPlanilhaAutomatica()'
            });
        }
        
        if (erro.includes('permiss')) {
            solucoes.push({
                problema: 'Problema de permiss√µes',
                solucao: 'Autorize todas as permiss√µes solicitadas'
            });
        }
        
        if (erro.includes('fun√ß√£o')) {
            solucoes.push({
                problema: 'Fun√ß√µes n√£o encontradas',
                solucao: 'Verifique se o c√≥digo backend est√° completo'
            });
        }
    });
    
    return solucoes;
}

function exibirRelatorioFinal(relatorio) {
    console.log('üìä === RELAT√ìRIO FINAL DE CONFIGURA√á√ÉO ===');
    
    relatorio.etapas.forEach((etapa, index) => {
        const status = etapa.sucesso ? '‚úÖ' : '‚ùå';
        console.log(`${index + 1}. ${status} ${etapa.etapa}`);
        
        if (!etapa.sucesso && etapa.detalhes.error) {
            console.log(`   Erro: ${etapa.detalhes.error}`);
        }
    });
    
    console.log('');
    console.log(`üéØ Sucesso Geral: ${relatorio.sucesso ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`üìà Taxa de Sucesso: ${relatorio.etapas.filter(e => e.sucesso).length}/${relatorio.etapas.length}`);
    
    if (relatorio.sucesso) {
        console.log('');
        console.log('üéâ === SISTEMA CONFIGURADO COM SUCESSO ===');
        console.log('');
        console.log('üåê Pr√≥ximos passos:');
        console.log('1. Publique como Web App (se ainda n√£o fez)');
        console.log('2. Acesse a URL do Web App');
        console.log('3. Teste o login com as credenciais fornecidas');
        console.log('');
        console.log('üîë Credenciais de teste:');
        console.log('Admin: admin / stark2025');
        console.log('Cliente: 762.538.452-65 / 2025026');
        
    } else {
        console.log('');
        console.log('‚ö†Ô∏è === CONFIGURA√á√ÉO CONCLU√çDA COM PROBLEMAS ===');
        console.log('');
        console.log('üîß Solu√ß√µes recomendadas:');
        if (relatorio.detalhes.solucoes) {
            relatorio.detalhes.solucoes.forEach(solucao => {
                console.log(`- ${solucao.problema}: ${solucao.solucao}`);
            });
        }
        console.log('');
        console.log('üí° Execute novamente: configuracaoAutomaticaCompleta()');
    }
    
    console.log('');
    console.log('üìû Para suporte adicional, compartilhe este relat√≥rio.');
}

// ===== FUN√á√ïES DE APOIO =====

function getOrCreateSpreadsheet() {
    try {
        return SpreadsheetApp.openById('1RAd3dzwJqaye8Czfv6-BhbFrh_dgvJKZMgc_K6v1-EU');
    } catch (error) {
        console.log('Criando nova planilha...');
        return SpreadsheetApp.create('StarkTech - Sistema de Credi√°rio');
    }
}
/**
 * ========================================
 * SISTEMA DE SINCRONIZA√á√ÉO BACKEND-PLANILHA
 * Corrige inconsist√™ncias e permite manipula√ß√£o
 * ========================================
 */

// ===== DIAGN√ìSTICO E CORRE√á√ÉO =====

function diagnosticarESincronizar() {
  console.log('üîç === DIAGN√ìSTICO COMPLETO DO SISTEMA ===');
  
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const relatorio = {
      problemas: [],
      correcoes: [],
      status: {}
    };
    
    // 1. Verificar estrutura das abas
    console.log('üìä 1. Verificando estrutura das abas...');
    const estruturaResult = verificarEstruturaPlanilha(spreadsheet);
    relatorio.status.estrutura = estruturaResult;
    
    // 2. Verificar dados √≥rf√£os
    console.log('üîó 2. Verificando v√≠nculos de dados...');
    const vinculosResult = verificarVinculosDados(spreadsheet);
    relatorio.status.vinculos = vinculosResult;
    
    // 3. Corrigir inconsist√™ncias
    console.log('üîß 3. Corrigindo inconsist√™ncias...');
    const correcaoResult = corrigirInconsistencias(spreadsheet);
    relatorio.correcoes = correcaoResult.correcoes;
    
    // 4. Verificar c√°lculos
    console.log('üßÆ 4. Verificando c√°lculos...');
    const calculosResult = verificarCalculos(spreadsheet);
    relatorio.status.calculos = calculosResult;
    
    // 5. Resultado final
    const sucessoTotal = Object.values(relatorio.status).every(s => s.success);
    
    console.log('üìã === RELAT√ìRIO FINAL ===');
    console.log(`‚úÖ Estrutura: ${relatorio.status.estrutura.success ? 'OK' : 'PROBLEMA'}`);
    console.log(`‚úÖ V√≠nculos: ${relatorio.status.vinculos.success ? 'OK' : 'PROBLEMA'}`);
    console.log(`‚úÖ C√°lculos: ${relatorio.status.calculos.success ? 'OK' : 'PROBLEMA'}`);
    console.log(`üéØ Status Geral: ${sucessoTotal ? '‚úÖ SINCRONIZADO' : '‚ö†Ô∏è PRECISA CORRE√á√ÉO'}`);
    
    return {
      success: sucessoTotal,
      relatorio: relatorio,
      proximosPassos: sucessoTotal ? 
        ['Sistema sincronizado!', 'Teste as fun√ß√µes de manipula√ß√£o'] :
        ['Execute: corrigirTudoAutomatico()', 'Verifique dados manualmente']
    };
    
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico:', error);
    return { success: false, error: error.message };
  }
}

function verificarEstruturaPlanilha(spreadsheet) {
  const estruturaCorreta = {
    'Clientes': ['ID', 'Nome', 'CPF', 'Email', 'Telefone', 'Senha', 'Data_Cadastro'],
    'Compras': ['ID', 'Cliente_ID', 'Cliente_Nome', 'Produto_Nome', 'Produto_Descricao', 'Produto_Emoji', 'Valor_Total', 'Data_Compra', 'Loja_Nome', 'Loja_Emoji', 'Status'],
    'Parcelas': ['ID', 'Compra_ID', 'Numero', 'Valor', 'Data_Vencimento', 'Status', 'Data_Pagamento', 'Link_Pagamento'],
    'Pagamentos': ['ID', 'Parcela_ID', 'Compra_ID', 'Valor', 'Data_Pagamento', 'Metodo']
  };
  
  const problemas = [];
  
  Object.entries(estruturaCorreta).forEach(([nomeAba, headersSperados]) => {
    try {
      const sheet = spreadsheet.getSheetByName(nomeAba);
      
      if (!sheet) {
        problemas.push(`Aba "${nomeAba}" n√£o existe`);
        return;
      }
      
      const headersAtuais = sheet.getRange(1, 1, 1, headersSperados.length).getValues()[0];
      
      headersSperados.forEach((header, index) => {
        if (headersAtuais[index] !== header) {
          problemas.push(`Aba "${nomeAba}": Header coluna ${index + 1} deveria ser "${header}" mas √© "${headersAtuais[index]}"`);
        }
      });
      
    } catch (error) {
      problemas.push(`Erro na aba "${nomeAba}": ${error.message}`);
    }
  });
  
  return {
    success: problemas.length === 0,
    problemas: problemas
  };
}

function verificarVinculosDados(spreadsheet) {
  try {
    const clientesSheet = spreadsheet.getSheetByName('Clientes');
    const comprasSheet = spreadsheet.getSheetByName('Compras');
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    
    const clientesData = clientesSheet.getDataRange().getValues();
    const comprasData = comprasSheet.getDataRange().getValues();
    const parcelasData = parcelasSheet.getDataRange().getValues();
    
    const problemas = [];
    
    // Verificar se todas as compras t√™m cliente v√°lido
    for (let i = 1; i < comprasData.length; i++) {
      const compra = comprasData[i];
      const clienteId = compra[1];
      
      if (clienteId) {
        const clienteExiste = clientesData.some(cliente => cliente[0] === clienteId);
        if (!clienteExiste) {
          problemas.push(`Compra ${compra[0]} tem cliente inexistente: ${clienteId}`);
        }
      }
    }
    
    // Verificar se todas as parcelas t√™m compra v√°lida
    for (let i = 1; i < parcelasData.length; i++) {
      const parcela = parcelasData[i];
      const compraId = parcela[1];
      
      if (compraId) {
        const compraExiste = comprasData.some(compra => compra[0] === compraId);
        if (!compraExiste) {
          problemas.push(`Parcela ${parcela[0]} tem compra inexistente: ${compraId}`);
        }
      }
    }
    
    return {
      success: problemas.length === 0,
      problemas: problemas,
      estatisticas: {
        clientes: clientesData.length - 1,
        compras: comprasData.length - 1,
        parcelas: parcelasData.length - 1
      }
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

function verificarCalculos(spreadsheet) {
  try {
    const comprasSheet = spreadsheet.getSheetByName('Compras');
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    
    const comprasData = comprasSheet.getDataRange().getValues();
    const parcelasData = parcelasSheet.getDataRange().getValues();
    
    const problemas = [];
    
    // Verificar se soma das parcelas = valor total da compra
    for (let i = 1; i < comprasData.length; i++) {
      const compra = comprasData[i];
      const compraId = compra[0];
      const valorTotal = Number(compra[6]) || 0;
      
      // Somar parcelas desta compra
      let somaParcelas = 0;
      let numParcelas = 0;
      
      for (let j = 1; j < parcelasData.length; j++) {
        const parcela = parcelasData[j];
        if (parcela[1] === compraId) {
          somaParcelas += Number(parcela[3]) || 0;
          numParcelas++;
        }
      }
      
      const diferenca = Math.abs(valorTotal - somaParcelas);
      
      if (diferenca > 0.01) { // Toler√¢ncia de 1 centavo
        problemas.push(`Compra ${compraId}: Valor total R$ ${valorTotal.toFixed(2)} ‚â† Soma parcelas R$ ${somaParcelas.toFixed(2)} (${numParcelas} parcelas)`);
      }
    }
    
    return {
      success: problemas.length === 0,
      problemas: problemas
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

// ===== CORRE√á√ÉO AUTOM√ÅTICA =====

function corrigirTudoAutomatico() {
  console.log('üîß === CORRE√á√ÉO AUTOM√ÅTICA INICIADA ===');
  
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const correcoes = [];
    
    // 1. Corrigir estrutura
    console.log('üìä Corrigindo estrutura...');
    const estruturaResult = corrigirEstrutura(spreadsheet);
    correcoes.push(...estruturaResult.correcoes);
    
    // 2. Corrigir v√≠nculos
    console.log('üîó Corrigindo v√≠nculos...');
    const vinculosResult = corrigirVinculos(spreadsheet);
    correcoes.push(...vinculosResult.correcoes);
    
    // 3. Recalcular valores
    console.log('üßÆ Recalculando valores...');
    const calculosResult = recalcularTodosValores(spreadsheet);
    correcoes.push(...calculosResult.correcoes);
    
    // 4. Sincronizar status
    console.log('üìä Sincronizando status...');
    const statusResult = sincronizarStatus(spreadsheet);
    correcoes.push(...statusResult.correcoes);
    
    console.log(`üéâ Corre√ß√£o conclu√≠da: ${correcoes.length} itens corrigidos`);
    
    return {
      success: true,
      totalCorrecoes: correcoes.length,
      detalhes: correcoes
    };
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o autom√°tica:', error);
    return { success: false, error: error.message };
  }
}

function corrigirEstrutura(spreadsheet) {
  const correcoes = [];
  
  const estruturaCorreta = {
    'Clientes': ['ID', 'Nome', 'CPF', 'Email', 'Telefone', 'Senha', 'Data_Cadastro'],
    'Compras': ['ID', 'Cliente_ID', 'Cliente_Nome', 'Produto_Nome', 'Produto_Descricao', 'Produto_Emoji', 'Valor_Total', 'Data_Compra', 'Loja_Nome', 'Loja_Emoji', 'Status'],
    'Parcelas': ['ID', 'Compra_ID', 'Numero', 'Valor', 'Data_Vencimento', 'Status', 'Data_Pagamento', 'Link_Pagamento'],
    'Pagamentos': ['ID', 'Parcela_ID', 'Compra_ID', 'Valor', 'Data_Pagamento', 'Metodo']
  };
  
  Object.entries(estruturaCorreta).forEach(([nomeAba, headers]) => {
    try {
      let sheet = spreadsheet.getSheetByName(nomeAba);
      
      if (!sheet) {
        sheet = spreadsheet.insertSheet(nomeAba);
        correcoes.push(`Aba "${nomeAba}" criada`);
      }
      
      // Corrigir headers
      const range = sheet.getRange(1, 1, 1, headers.length);
      range.setValues([headers]);
      range.setFontWeight('bold');
      range.setBackground('#E3F2FD');
      
      correcoes.push(`Headers da aba "${nomeAba}" corrigidos`);
      
    } catch (error) {
      correcoes.push(`Erro ao corrigir aba "${nomeAba}": ${error.message}`);
    }
  });
  
  return { correcoes };
}

function corrigirVinculos(spreadsheet) {
  const correcoes = [];
  
  try {
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    const comprasSheet = spreadsheet.getSheetByName('Compras');
    
    const parcelasData = parcelasSheet.getDataRange().getValues();
    const comprasData = comprasSheet.getDataRange().getValues();
    
    // Coletar IDs de compras v√°lidas
    const comprasValidas = new Set();
    for (let i = 1; i < comprasData.length; i++) {
      if (comprasData[i][0]) {
        comprasValidas.add(comprasData[i][0]);
      }
    }
    
    // Verificar e corrigir parcelas √≥rf√£s
    for (let i = 1; i < parcelasData.length; i++) {
      const parcela = parcelasData[i];
      const compraId = parcela[1];
      
      if (compraId && !comprasValidas.has(compraId)) {
        // Parcela √≥rf√£ - tentar encontrar compra similar ou remover
        console.log(`‚ö†Ô∏è Parcela √≥rf√£ encontrada: ${parcela[0]} -> ${compraId}`);
        
        // Por hora, vamos marcar como inv√°lida
        parcelasSheet.getRange(i + 1, 6).setValue('Inv√°lida'); // Status
        correcoes.push(`Parcela ${parcela[0]} marcada como inv√°lida (compra inexistente)`);
      }
    }
    
  } catch (error) {
    correcoes.push(`Erro ao corrigir v√≠nculos: ${error.message}`);
  }
  
  return { correcoes };
}

function recalcularTodosValores(spreadsheet) {
  const correcoes = [];
  
  try {
    const comprasSheet = spreadsheet.getSheetByName('Compras');
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    
    const comprasData = comprasSheet.getDataRange().getValues();
    const parcelasData = parcelasSheet.getDataRange().getValues();
    
    // Para cada compra, recalcular parcelas
    for (let i = 1; i < comprasData.length; i++) {
      const compra = comprasData[i];
      const compraId = compra[0];
      const valorTotal = Number(compra[6]) || 0;
      
      if (!compraId || valorTotal <= 0) continue;
      
      // Encontrar parcelas desta compra
      const parcelas = [];
      for (let j = 1; j < parcelasData.length; j++) {
        if (parcelasData[j][1] === compraId && parcelasData[j][5] !== 'Inv√°lida') {
          parcelas.push({
            linha: j + 1,
            numero: parcelasData[j][2],
            valorAtual: Number(parcelasData[j][3]) || 0
          });
        }
      }
      
      if (parcelas.length === 0) continue;
      
      // Calcular novo valor por parcela
      const valorPorParcela = valorTotal / parcelas.length;
      
      // Atualizar valores se necess√°rio
      let precisaCorrecao = false;
      parcelas.forEach(parcela => {
        const diferenca = Math.abs(parcela.valorAtual - valorPorParcela);
        if (diferenca > 0.01) {
          precisaCorrecao = true;
        }
      });
      
      if (precisaCorrecao) {
        parcelas.forEach(parcela => {
          parcelasSheet.getRange(parcela.linha, 4).setValue(valorPorParcela);
        });
        
        correcoes.push(`Compra ${compraId}: ${parcelas.length} parcelas recalculadas para R$ ${valorPorParcela.toFixed(2)} cada`);
      }
    }
    
  } catch (error) {
    correcoes.push(`Erro ao recalcular valores: ${error.message}`);
  }
  
  return { correcoes };
}

function sincronizarStatus(spreadsheet) {
  const correcoes = [];
  
  try {
    const comprasSheet = spreadsheet.getSheetByName('Compras');
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    
    const comprasData = comprasSheet.getDataRange().getValues();
    const parcelasData = parcelasSheet.getDataRange().getValues();
    
    // Para cada compra, verificar status baseado nas parcelas
    for (let i = 1; i < comprasData.length; i++) {
      const compra = comprasData[i];
      const compraId = compra[0];
      const statusAtual = compra[10];
      
      if (!compraId) continue;
      
      // Contar parcelas pagas e pendentes
      let parcelasPagas = 0;
      let parcelasPendentes = 0;
      let totalParcelas = 0;
      
      for (let j = 1; j < parcelasData.length; j++) {
        const parcela = parcelasData[j];
        if (parcela[1] === compraId && parcela[5] !== 'Inv√°lida') {
          totalParcelas++;
          if (parcela[5] === 'Pago') {
            parcelasPagas++;
          } else if (parcela[5] === 'Pendente') {
            parcelasPendentes++;
          }
        }
      }
      
      // Determinar novo status
      let novoStatus;
      if (totalParcelas === 0) {
        novoStatus = 'Sem Parcelas';
      } else if (parcelasPagas === totalParcelas) {
        novoStatus = 'Quitado';
      } else if (parcelasPagas > 0) {
        novoStatus = 'Parcial';
      } else {
        novoStatus = 'Ativo';
      }
      
      // Atualizar se necess√°rio
      if (statusAtual !== novoStatus) {
        comprasSheet.getRange(i + 1, 11).setValue(novoStatus);
        correcoes.push(`Compra ${compraId}: Status "${statusAtual}" ‚Üí "${novoStatus}" (${parcelasPagas}/${totalParcelas} pagas)`);
      }
    }
    
  } catch (error) {
    correcoes.push(`Erro ao sincronizar status: ${error.message}`);
  }
  
  return { correcoes };
}

// ===== FUN√á√ïES DE MANIPULA√á√ÉO DE PARCELAS =====

function editarParcela(parcelaId, novosDados) {
  console.log('‚úèÔ∏è Editando parcela:', parcelaId);
  
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    const data = parcelasSheet.getDataRange().getValues();
    
    // Encontrar a parcela
    let linha = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === parcelaId) {
        linha = i + 1;
        break;
      }
    }
    
    if (linha === -1) {
      return { success: false, error: 'Parcela n√£o encontrada' };
    }
    
    const alteracoes = [];
    
    // Atualizar campos
    if (novosDados.numero !== undefined) {
      parcelasSheet.getRange(linha, 3).setValue(Number(novosDados.numero));
      alteracoes.push(`N√∫mero: ${novosDados.numero}`);
    }
    
    if (novosDados.valor !== undefined) {
      parcelasSheet.getRange(linha, 4).setValue(Number(novosDados.valor));
      alteracoes.push(`Valor: R$ ${Number(novosDados.valor).toFixed(2)}`);
    }
    
    if (novosDados.dataVencimento !== undefined) {
      parcelasSheet.getRange(linha, 5).setValue(new Date(novosDados.dataVencimento));
      alteracoes.push(`Vencimento: ${novosDados.dataVencimento}`);
    }
    
    if (novosDados.status !== undefined) {
      parcelasSheet.getRange(linha, 6).setValue(novosDados.status);
      alteracoes.push(`Status: ${novosDados.status}`);
      
      // Se marcou como pago, adicionar data de pagamento
      if (novosDados.status === 'Pago' && !data[linha-1][6]) {
        parcelasSheet.getRange(linha, 7).setValue(new Date());
        alteracoes.push('Data pagamento: ' + new Date().toLocaleDateString());
      }
      
      // Se desmarcou como pago, limpar data de pagamento
      if (novosDados.status !== 'Pago') {
        parcelasSheet.getRange(linha, 7).setValue('');
      }
    }
    
    if (novosDados.linkPagamento !== undefined) {
      parcelasSheet.getRange(linha, 8).setValue(novosDados.linkPagamento);
      alteracoes.push(`Link: ${novosDados.linkPagamento}`);
    }
    
    // Recalcular status da compra
    const compraId = data[linha-1][1];
    sincronizarStatusCompra(compraId);
    
    console.log(`‚úÖ Parcela ${parcelaId} editada: ${alteracoes.join(', ')}`);
    
    return {
      success: true,
      message: 'Parcela editada com sucesso',
      alteracoes: alteracoes
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao editar parcela:', error);
    return { success: false, error: error.message };
  }
}
function setPaymentLink(parcelId, paymentLink) {
  const spreadsheet = getOrCreateSpreadsheet();
  const sheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const currentParcelId = String(row[0]).trim(); // Assumindo que o ID da parcela est√° na primeira coluna
    if (currentParcelId === parcelId) {
      // Atualiza a coluna de link de pagamento (supondo que seja a coluna 8, por exemplo)
      sheet.getRange(i + 1, 8).setValue(paymentLink);
      Logger.log(`Link de pagamento atualizado para parcela ${parcelId}`);
      return { success: true };
    }
  }
  return { success: false, error: 'Parcela n√£o encontrada' };
}

function criarNovaParcela(compraId, dadosParcela) {
  console.log('‚ûï Criando nova parcela para compra:', compraId);
  
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    const comprasSheet = spreadsheet.getSheetByName('Compras');
    
    // Verificar se a compra existe
    const comprasData = comprasSheet.getDataRange().getValues();
    const compraExiste = comprasData.some(row => row[0] === compraId);
    
    if (!compraExiste) {
      return { success: false, error: 'Compra n√£o encontrada' };
    }
    
    // Gerar pr√≥ximo n√∫mero de parcela
    const parcelasData = parcelasSheet.getDataRange().getValues();
    let maiorNumero = 0;
    
    for (let i = 1; i < parcelasData.length; i++) {
      if (parcelasData[i][1] === compraId) {
        maiorNumero = Math.max(maiorNumero, Number(parcelasData[i][2]) || 0);
      }
    }
    
    const novaParcela = [
      generateId(),
      compraId,
      dadosParcela.numero || (maiorNumero + 1),
      Number(dadosParcela.valor) || 0,
      new Date(dadosParcela.dataVencimento) || new Date(),
      dadosParcela.status || 'Pendente',
      dadosParcela.status === 'Pago' ? new Date() : '',
      dadosParcela.linkPagamento || ''
    ];
    
    parcelasSheet.appendRow(novaParcela);
    
    // Recalcular status da compra
    sincronizarStatusCompra(compraId);
    
    console.log(`‚úÖ Nova parcela criada: ${novaParcela[2]} - R$ ${novaParcela[3]}`);
    
    return {
      success: true,
      message: 'Parcela criada com sucesso',
      parcelaId: novaParcela[0]
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao criar parcela:', error);
    return { success: false, error: error.message };
  }
}

function excluirParcela(parcelaId) {
  console.log('üóëÔ∏è Excluindo parcela:', parcelaId);
  
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    const data = parcelasSheet.getDataRange().getValues();
    
    // Encontrar e excluir a parcela
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === parcelaId) {
        const compraId = data[i][1];
        const numeroParcela = data[i][2];
        
        parcelasSheet.deleteRow(i + 1);
        
        // Recalcular status da compra
        sincronizarStatusCompra(compraId);
        
        console.log(`‚úÖ Parcela ${numeroParcela} exclu√≠da`);
        
        return {
          success: true,
          message: `Parcela ${numeroParcela} exclu√≠da com sucesso`
        };
      }
    }
    
    return { success: false, error: 'Parcela n√£o encontrada' };
    
  } catch (error) {
    console.error('‚ùå Erro ao excluir parcela:', error);
    return { success: false, error: error.message };
  }
}

function sincronizarStatusCompra(compraId) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    sincronizarStatus(spreadsheet);
  } catch (error) {
    console.error('‚ùå Erro ao sincronizar status:', error);
  }
}
/**
 * ========================================
 * STARKTECH - FUN√á√ïES PARA LINKS DE PAGAMENTO DA PLANILHA
 * Integra√ß√£o com Frontend Atualizado
 * ========================================
 */

/**
 * FUN√á√ÉO PRINCIPAL: Buscar URL de pagamento na planilha
 * Esta √© a fun√ß√£o que o frontend chama
 */
function getPaymentUrlFromSheet(params) {
  try {
    console.log('üîç Buscando URL de pagamento na planilha:', params);
    
    const { creditId, installmentNumber, installmentId } = params;
    
    // Valida√ß√µes
    if (!creditId || !installmentNumber) {
      return {
        success: false,
        error: 'Par√¢metros obrigat√≥rios n√£o informados'
      };
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      console.log('‚ùå Aba Parcelas n√£o encontrada');
      return {
        success: false,
        error: 'Aba de parcelas n√£o encontrada'
      };
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Buscar coluna de link de pagamento
    let linkColumnIndex = headers.indexOf('Link_Pagamento');
    
    // Se n√£o encontrar, tentar outras varia√ß√µes
    if (linkColumnIndex === -1) {
      linkColumnIndex = headers.indexOf('Link_Pagamento_Nubank');
    }
    if (linkColumnIndex === -1) {
      linkColumnIndex = headers.indexOf('URL_Pagamento');
    }
    if (linkColumnIndex === -1) {
      linkColumnIndex = headers.indexOf('Payment_URL');
    }
    
    if (linkColumnIndex === -1) {
      console.log('‚ö†Ô∏è Coluna de link de pagamento n√£o encontrada');
      return {
        success: false,
        error: 'Coluna de link de pagamento n√£o configurada na planilha'
      };
    }
    
    console.log(`üìç Coluna de link encontrada no √≠ndice: ${linkColumnIndex}`);
    
    // Buscar a parcela espec√≠fica
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCreditId = String(row[1] || '').trim(); // Compra_ID
      const rowInstallmentNumber = parseInt(row[2] || 0); // Numero
      
      console.log(`üîç Linha ${i}: CreditID="${rowCreditId}" | InstallmentNumber="${rowInstallmentNumber}"`);
      
      if (rowCreditId === String(creditId).trim() && rowInstallmentNumber === parseInt(installmentNumber)) {
        const paymentUrl = row[linkColumnIndex];
        
        console.log(`üéØ Parcela encontrada! URL: "${paymentUrl}"`);
        
        if (paymentUrl && String(paymentUrl).trim() !== '' && String(paymentUrl).trim() !== 'undefined') {
          const cleanUrl = String(paymentUrl).trim();
          
          console.log(`‚úÖ URL v√°lida encontrada: ${cleanUrl}`);
          
          return {
            success: true,
            paymentUrl: cleanUrl,
            message: 'Link de pagamento encontrado na planilha'
          };
        } else {
          console.log('‚ö†Ô∏è URL vazia ou inv√°lida');
          return {
            success: false,
            error: 'Link de pagamento n√£o configurado para esta parcela'
          };
        }
      }
    }
    
    console.log('‚ùå Parcela n√£o encontrada');
    return {
      success: false,
      error: `Parcela ${installmentNumber} do credi√°rio ${creditId} n√£o encontrada`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar URL na planilha:', error);
    return {
      success: false,
      error: 'Erro interno: ' + error.message
    };
  }
}

/**
 * FUN√á√ÉO: Solicitar cria√ß√£o de link de pagamento
 * Registra solicita√ß√£o para que o admin configure o link
 */
function requestPaymentUrl(params) {
  try {
    console.log('üìß Solicitando cria√ß√£o de link de pagamento:', params);
    
    const { creditId, installmentNumber, installmentId } = params;
    
    const spreadsheet = getOrCreateSpreadsheet();
    
    // Criar aba de solicita√ß√µes se n√£o existir
    let requestsSheet = spreadsheet.getSheetByName('Solicitacoes_Links');
    
    if (!requestsSheet) {
      requestsSheet = spreadsheet.insertSheet('Solicitacoes_Links');
      requestsSheet.getRange(1, 1, 1, 6).setValues([[
        'Data_Solicitacao', 'Credit_ID', 'Installment_Number', 'Installment_ID', 'Status', 'Observacoes'
      ]]);
      
      // Formatar header
      const headerRange = requestsSheet.getRange(1, 1, 1, 6);
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#FFE0B2');
      
      console.log('‚úÖ Aba de solicita√ß√µes criada');
    }
    
    // Registrar solicita√ß√£o
    requestsSheet.appendRow([
      new Date(),
      creditId,
      installmentNumber,
      installmentId,
      'Pendente',
      `Solicitado via sistema - Parcela ${installmentNumber}`
    ]);
    
    console.log('‚úÖ Solicita√ß√£o registrada');
    
    return {
      success: true,
      message: 'Solicita√ß√£o de link de pagamento registrada. Ser√° configurado em breve.'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao solicitar link:', error);
    return {
      success: false,
      error: 'Erro ao registrar solicita√ß√£o: ' + error.message
    };
  }
}

/**
 * FUN√á√ÉO MELHORADA: Marcar parcela como paga
 * Vers√£o otimizada da fun√ß√£o existente
 */
function markInstallmentAsPaid(params) {
  try {
    console.log('üí∞ Marcando parcela como paga:', params);
    
    const { installmentId, paymentMethod, note } = params;
    
    if (!installmentId) {
      return { success: false, error: 'ID da parcela n√£o informado' };
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    const paymentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.PAYMENTS);
    
    if (!installmentsSheet) {
      return { success: false, error: 'Aba de parcelas n√£o encontrada' };
    }
    
    const installmentsData = installmentsSheet.getDataRange().getValues();
    
    // Buscar a parcela
    let installmentRow = -1;
    let installmentData = null;
    
    for (let i = 1; i < installmentsData.length; i++) {
      if (String(installmentsData[i][0]).trim() === String(installmentId).trim()) {
        installmentRow = i + 1;
        installmentData = installmentsData[i];
        break;
      }
    }
    
    if (installmentRow === -1) {
      return { success: false, error: 'Parcela n√£o encontrada' };
    }
    
    // Verificar se j√° est√° paga
    if (installmentData[5] === 'Pago') {
      return { 
        success: false, 
        error: 'Esta parcela j√° foi paga',
        dataPagamento: installmentData[6]
      };
    }
    
    // Atualizar status da parcela
    const paymentDate = new Date();
    installmentsSheet.getRange(installmentRow, 6).setValue('Pago'); // Status
    installmentsSheet.getRange(installmentRow, 7).setValue(paymentDate); // Data_Pagamento
    
    // Registrar pagamento na aba Pagamentos (se existir)
    if (paymentsSheet) {
      const paymentId = generateId();
      const creditId = installmentData[1];
      const installmentValue = Number(installmentData[3]) || 0;
      
      paymentsSheet.appendRow([
        paymentId,
        installmentId,
        creditId,
        installmentValue,
        paymentDate,
        paymentMethod || 'Pagamento Manual'
      ]);
    }
    
    // Verificar se todas as parcelas foram pagas
    const creditId = installmentData[1];
    const allPaid = checkIfAllInstallmentsPaid(creditId);
    
    if (allPaid) {
      updateCreditStatus(creditId, 'Quitado');
    }
    
    console.log('‚úÖ Parcela marcada como paga');
    
    return {
      success: true,
      message: 'Parcela marcada como paga com sucesso!',
      allPaid: allPaid,
      paymentDate: paymentDate
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao marcar como pago:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * FUN√á√ÉO: Adicionar link de pagamento a uma parcela espec√≠fica
 * Para uso administrativo
 */
function addPaymentUrlToParcela(creditId, installmentNumber, paymentUrl) {
  try {
    console.log('üîó Adicionando link de pagamento:', {
      creditId,
      installmentNumber,
      paymentUrl
    });
    
    if (!creditId || !installmentNumber || !paymentUrl) {
      return {
        success: false,
        error: 'Todos os par√¢metros s√£o obrigat√≥rios'
      };
    }
    
    // Validar URL
    try {
      new URL(paymentUrl);
    } catch (e) {
      return {
        success: false,
        error: 'URL de pagamento inv√°lida'
      };
    }
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      return { success: false, error: 'Aba de parcelas n√£o encontrada' };
    }
    
    // Garantir que existe coluna de link
    const ensureResult = ensurePaymentLinkColumn(installmentsSheet);
    if (!ensureResult.success) {
      return ensureResult;
    }
    
    const data = installmentsSheet.getDataRange().getValues();
    const headers = data[0];
    const linkColumnIndex = findPaymentLinkColumnIndex(headers);
    
    // Buscar e atualizar a parcela
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCreditId = String(row[1] || '').trim();
      const rowInstallmentNumber = parseInt(row[2] || 0);
      
      if (rowCreditId === String(creditId).trim() && rowInstallmentNumber === parseInt(installmentNumber)) {
        // Atualizar o link
        installmentsSheet.getRange(i + 1, linkColumnIndex + 1).setValue(paymentUrl);
        
        console.log(`‚úÖ Link adicionado √† parcela ${installmentNumber} da compra ${creditId}`);
        
        return {
          success: true,
          message: `Link de pagamento adicionado √† parcela ${installmentNumber}`,
          linha: i + 1,
          paymentUrl: paymentUrl
        };
      }
    }
    
    return {
      success: false,
      error: `Parcela ${installmentNumber} da compra ${creditId} n√£o encontrada`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao adicionar link:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * FUN√á√ÉO: Adicionar m√∫ltiplos links para um credi√°rio
 */
function addMultiplePaymentUrls(creditId, urlsArray) {
  try {
    console.log('üì¶ Adicionando m√∫ltiplos links:', { creditId, totalUrls: urlsArray.length });
    
    if (!creditId || !Array.isArray(urlsArray)) {
      return {
        success: false,
        error: 'CreditId e array de URLs s√£o obrigat√≥rios'
      };
    }
    
    const results = [];
    let successCount = 0;
    
    urlsArray.forEach((url, index) => {
      const installmentNumber = index + 1;
      
      if (url && String(url).trim() !== '') {
        const result = addPaymentUrlToParcela(creditId, installmentNumber, url.trim());
        
        results.push({
          parcela: installmentNumber,
          success: result.success,
          message: result.message || result.error,
          url: url
        });
        
        if (result.success) {
          successCount++;
        }
      } else {
        results.push({
          parcela: installmentNumber,
          success: false,
          message: 'URL vazia ou inv√°lida',
          url: url
        });
      }
    });
    
    return {
      success: successCount > 0,
      message: `${successCount} links adicionados de ${urlsArray.length} tentativas`,
      successCount: successCount,
      totalAttempts: urlsArray.length,
      details: results
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao adicionar m√∫ltiplos links:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * FUN√á√ÉO: Listar parcelas com status de links
 */
function listParcelasWithPaymentLinks(creditId = null) {
  try {
    console.log('üìã Listando parcelas com status de links:', creditId || 'todas');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    const creditsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CREDITS);
    
    if (!installmentsSheet || !creditsSheet) {
      return { success: false, error: 'Abas necess√°rias n√£o encontradas' };
    }
    
    const installmentsData = installmentsSheet.getDataRange().getValues();
    const creditsData = creditsSheet.getDataRange().getValues();
    const headers = installmentsData[0];
    const linkColumnIndex = findPaymentLinkColumnIndex(headers);
    
    const parcelas = [];
    
    // Se creditId especificado, buscar informa√ß√µes do credi√°rio
    let creditInfo = null;
    if (creditId) {
      for (let i = 1; i < creditsData.length; i++) {
        if (creditsData[i][0] === creditId) {
          creditInfo = {
            id: creditsData[i][0],
            clientName: creditsData[i][2],
            productName: creditsData[i][3],
            totalValue: creditsData[i][6]
          };
          break;
        }
      }
    }
    
    // Listar parcelas
    for (let i = 1; i < installmentsData.length; i++) {
      const row = installmentsData[i];
      
      if (creditId && row[1] !== creditId) continue;
      
      const paymentUrl = linkColumnIndex !== -1 ? row[linkColumnIndex] : null;
      const hasValidUrl = paymentUrl && String(paymentUrl).trim() !== '';
      
      parcelas.push({
        id: row[0],
        creditId: row[1],
        numero: row[2],
        valor: row[3],
        dataVencimento: formatDate(row[4]),
        status: row[5],
        dataPagamento: row[6] ? formatDate(row[6]) : null,
        paymentUrl: hasValidUrl ? String(paymentUrl).trim() : null,
        hasPaymentUrl: hasValidUrl,
        paymentUrlStatus: hasValidUrl ? 'Configurado' : 'N√£o configurado'
      });
    }
    
    // Ordenar por n√∫mero da parcela
    parcelas.sort((a, b) => a.numero - b.numero);
    
    return {
      success: true,
      creditInfo: creditInfo,
      parcelas: parcelas,
      totalParcelas: parcelas.length,
      comLinks: parcelas.filter(p => p.hasPaymentUrl).length,
      semLinks: parcelas.filter(p => !p.hasPaymentUrl).length
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao listar parcelas:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * FUN√á√ÉO AUXILIAR: Garantir que existe coluna de link de pagamento
 */
function ensurePaymentLinkColumn(sheet) {
  try {
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    if (findPaymentLinkColumnIndex(headers) === -1) {
      // Adicionar coluna
      const newColumnIndex = headers.length + 1;
      sheet.getRange(1, newColumnIndex).setValue('Link_Pagamento');
      
      // Formatar header
      sheet.getRange(1, newColumnIndex)
        .setFontWeight('bold')
        .setBackground('#E8F5E8');
      
      console.log('‚úÖ Coluna Link_Pagamento criada');
    }
    
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Erro ao garantir coluna:', error);
    return { success: false, error: error.message };
  }
}

/**
 * FUN√á√ÉO AUXILIAR: Encontrar √≠ndice da coluna de link de pagamento
 */
function findPaymentLinkColumnIndex(headers) {
  const possibleNames = [
    'Link_Pagamento',
    'Link_Pagamento_Nubank', 
    'URL_Pagamento',
    'Payment_URL',
    'PaymentLink'
  ];
  
  for (const name of possibleNames) {
    const index = headers.indexOf(name);
    if (index !== -1) {
      return index;
    }
  }
  
  return -1;
}

/**
 * FUN√á√ÉO ADMINISTRATIVA: Relat√≥rio de links de pagamento
 */
function generatePaymentLinksReport() {
  try {
    console.log('üìä Gerando relat√≥rio de links de pagamento...');
    
    const spreadsheet = getOrCreateSpreadsheet();
    const creditsResult = getCredits();
    
    if (!creditsResult.success) {
      return { success: false, error: 'Erro ao carregar credi√°rios' };
    }
    
    const report = {
      totalCreditos: 0,
      creditosCompletos: 0,
      creditosIncompletos: 0,
      totalParcelas: 0,
      parcelasComLink: 0,
      parcelasSemLink: 0,
      detalhes: []
    };
    
    creditsResult.credits.forEach(credit => {
      const parcelasResult = listParcelasWithPaymentLinks(credit.id);
      
      if (parcelasResult.success) {
        const { parcelas, comLinks, semLinks } = parcelasResult;
        
        report.totalCreditos++;
        report.totalParcelas += parcelas.length;
        report.parcelasComLink += comLinks;
        report.parcelasSemLink += semLinks;
        
        const percentualCompleto = parcelas.length > 0 ? Math.round((comLinks / parcelas.length) * 100) : 0;
        const isCompleto = comLinks === parcelas.length && parcelas.length > 0;
        
        if (isCompleto) {
          report.creditosCompletos++;
        } else {
          report.creditosIncompletos++;
        }
        
        report.detalhes.push({
          creditId: credit.id,
          clientName: credit.clientName,
          productName: credit.productName,
          totalParcelas: parcelas.length,
          parcelasComLink: comLinks,
          parcelasSemLink: semLinks,
          percentualCompleto: percentualCompleto,
          status: isCompleto ? 'Completo' : 'Incompleto'
        });
      }
    });
    
    // Ordenar por status (incompletos primeiro)
    report.detalhes.sort((a, b) => {
      if (a.status !== b.status) {
        return a.status === 'Incompleto' ? -1 : 1;
      }
      return a.percentualCompleto - b.percentualCompleto;
    });
    
    console.log('üìä Relat√≥rio gerado:', report);
    
    return {
      success: true,
      report: report,
      message: `Relat√≥rio de ${report.totalCreditos} credi√°rios gerado`
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * FUN√á√ÉO: Configura√ß√£o r√°pida do sistema de links
 */
function setupPaymentLinksSystem() {
  console.log('‚ö° Configurando sistema de links de pagamento...');
  
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const installmentsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.INSTALLMENTS);
    
    if (!installmentsSheet) {
      return { success: false, error: 'Aba de parcelas n√£o encontrada' };
    }
    
    // Garantir coluna de links
    const columnResult = ensurePaymentLinkColumn(installmentsSheet);
    if (!columnResult.success) {
      return columnResult;
    }
    
    // Gerar relat√≥rio inicial
    const reportResult = generatePaymentLinksReport();
    
    console.log('‚úÖ Sistema de links configurado!');
    console.log('üí° Pr√≥ximos passos:');
    console.log('1. Use addPaymentUrlToParcela() para adicionar links individuais');
    console.log('2. Use addMultiplePaymentUrls() para adicionar v√°rios links');
    console.log('3. Use listParcelasWithPaymentLinks() para verificar status');
    
    return {
      success: true,
      message: 'Sistema de links de pagamento configurado com sucesso!',
      reportInicial: reportResult.success ? reportResult.report : null,
      funcoes: [
        'addPaymentUrlToParcela(creditId, installmentNumber, paymentUrl)',
        'addMultiplePaymentUrls(creditId, [url1, url2, url3])',
        'listParcelasWithPaymentLinks(creditId)',
        'generatePaymentLinksReport()'
      ]
    };
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error);
    return { success: false, error: 'Erro interno: ' + error.message };
  }
}

/**
 * EXEMPLO DE USO - CONFIGURA√á√ÉO COMPLETA
 */
function exemploConfiguracaoLinks() {
  console.log('üí° === EXEMPLO DE CONFIGURA√á√ÉO DE LINKS ===');
  
  try {
    // 1. Configurar sistema
    console.log('1Ô∏è‚É£ Configurando sistema...');
    const setupResult = setupPaymentLinksSystem();
    console.log('Setup:', setupResult.success ? '‚úÖ' : '‚ùå');
    
    // 2. Listar credi√°rios dispon√≠veis
    console.log('2Ô∏è‚É£ Listando credi√°rios...');
    const creditsResult = getCredits();
    
    if (creditsResult.success && creditsResult.credits.length > 0) {
      const exemploCredit = creditsResult.credits[0];
      console.log(`üìã Usando credi√°rio exemplo: ${exemploCredit.id} - ${exemploCredit.productName}`);
      
      // 3. Adicionar links de exemplo
      console.log('3Ô∏è‚É£ Adicionando links de exemplo...');
      
      const linksExemplo = [
        'https://checkout.nubank.com.br/parcela1-exemplo',
        'https://checkout.nubank.com.br/parcela2-exemplo',
        'https://checkout.nubank.com.br/parcela3-exemplo'
      ];
      
      const addResult = addMultiplePaymentUrls(exemploCredit.id, linksExemplo);
      console.log('Links adicionados:', addResult.success ? '‚úÖ' : '‚ùå');
      
      // 4. Verificar resultado
      console.log('4Ô∏è‚É£ Verificando resultado...');
      const listResult = listParcelasWithPaymentLinks(exemploCredit.id);
      console.log('Verifica√ß√£o:', listResult.success ? '‚úÖ' : '‚ùå');
      
      if (listResult.success) {
        console.log(`üìä ${listResult.comLinks}/${listResult.totalParcelas} parcelas com links`);
      }
    }
    
    // 5. Gerar relat√≥rio
    console.log('5Ô∏è‚É£ Gerando relat√≥rio...');
    const reportResult = generatePaymentLinksReport();
    console.log('Relat√≥rio:', reportResult.success ? '‚úÖ' : '‚ùå');
    
    return {
      success: true,
      message: 'Exemplo executado com sucesso!'
    };
    
  } catch (error) {
    console.error('‚ùå Erro no exemplo:', error);
    return { success: false, error: error.message };
  }
}

// ========================================
// LOGS DE INICIALIZA√á√ÉO
// ========================================

console.log('üîó === SISTEMA DE LINKS DE PAGAMENTO CARREGADO ===');
console.log('‚úÖ Fun√ß√µes principais:');
console.log('  - getPaymentUrlFromSheet(): Buscar URL na planilha');
console.log('  - requestPaymentUrl(): Solicitar cria√ß√£o de link'); 
console.log('  - markInstallmentAsPaid(): Marcar como pago');
console.log('  - addPaymentUrlToParcela(): Adicionar link individual');
console.log('  - addMultiplePaymentUrls(): Adicionar m√∫ltiplos links');
console.log('');
console.log('üöÄ Para configurar: setupPaymentLinksSystem()');
console.log('üí° Para exemplo: exemploConfiguracaoLinks()');
console.log('üìä Para relat√≥rio: generatePaymentLinksReport()');
console.log('');
console.log('üéØ O frontend agora buscar√° automaticamente os links da planilha!');

/**
 * ========================================
 * INTEGRA√á√ÉO COM FUN√á√ïES EXISTENTES
 * Mant√©m compatibilidade com c√≥digo anterior
 * ========================================
 */

// Atualizar fun√ß√£o existente para usar os novos links
function getPaymentUrlByProduct(creditId, installmentNumber) {
  console.log('üîÑ getPaymentUrlByProduct chamada (modo compatibilidade)');
  
  // Tentar buscar na planilha primeiro
  const planilhaResult = getPaymentUrlFromSheet({
    creditId: creditId,
    installmentNumber: installmentNumber
  });
  
  if (planilhaResult.success && planilhaResult.paymentUrl) {
    console.log('‚úÖ URL encontrada na planilha via compatibilidade');
    return planilhaResult.paymentUrl;
  }
  
  // Fallback para URLs fixas (manter compatibilidade)
  const urlsFixas = {
    1: 'https://checkout.nubank.com.br/QuKX2aKfp5azqxv',
    2: 'https://checkout.nubank.com.br/NY31fitfzhazqxv', 
    3: 'https://checkout.nubank.com.br/vc9ew5NXpgazqxv'
  };
  
  const urlFixa = urlsFixas[installmentNumber];
  if (urlFixa) {
    console.log('‚ö° Usando URL fixa de fallback');
    return urlFixa;
  }
  
  // URL padr√£o final
  console.log('üîÑ Usando URL padr√£o');
  return 'https://checkout.nubank.com.br/QuKX2aKfp5azqxv';
}

// ===== FUN√á√ïES DE INTERFACE ADMINISTRATIVA =====

function obterParcelasEditaveis(compraId) {
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    const data = parcelasSheet.getDataRange().getValues();
    
    const parcelas = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[1] === compraId && row[0]) {
        parcelas.push({
          id: row[0],
          numero: row[2],
          valor: row[3],
          dataVencimento: formatDateSafe(row[4]),
          status: row[5],
          dataPagamento: row[6] ? formatDateSafe(row[6]) : null,
          linkPagamento: row[7] || ''
        });
      }
    }
    
    parcelas.sort((a, b) => a.numero - b.numero);
    
    return {
      success: true,
      parcelas: parcelas
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao obter parcelas edit√°veis:', error);
    return { success: false, error: error.message };
  }
}

function redividirParcelas(compraId, novoNumeroParcelas) {
  console.log(`üîÑ Redividindo compra ${compraId} em ${novoNumeroParcelas} parcelas`);
  
  try {
    const spreadsheet = getOrCreateSpreadsheet();
    const comprasSheet = spreadsheet.getSheetByName('Compras');
    const parcelasSheet = spreadsheet.getSheetByName('Parcelas');
    
    // Buscar dados da compra
    const comprasData = comprasSheet.getDataRange().getValues();
    let compra = null;
    
    for (let i = 1; i < comprasData.length; i++) {
      if (comprasData[i][0] === compraId) {
        compra = comprasData[i];
        break;
      }
    }
    
    if (!compra) {
      return { success: false, error: 'Compra n√£o encontrada' };
    }
    
    const valorTotal = Number(compra[6]);
    const dataCompra = new Date(compra[7]);
    
    // Remover parcelas antigas
    const parcelasData = parcelasSheet.getDataRange().getValues();
    for (let i = parcelasData.length - 1; i >= 1; i--) {
      if (parcelasData[i][1] === compraId) {
        parcelasSheet.deleteRow(i + 1);
      }
    }
    
    // Criar novas parcelas
    const valorPorParcela = valorTotal / novoNumeroParcelas;
    
    for (let p = 1; p <= novoNumeroParcelas; p++) {
      const dataVencimento = new Date(dataCompra);
      dataVencimento.setMonth(dataVencimento.getMonth() + p);
      
      const novaParcela = [
        generateId(),
        compraId,
        p,
        valorPorParcela,
        dataVencimento,
        'Pendente',
        '',
        ''
      ];
      
      parcelasSheet.appendRow(novaParcela);
    }
    
    // Atualizar status da compra
    sincronizarStatusCompra(compraId);
    
    console.log(`‚úÖ ${novoNumeroParcelas} parcelas criadas de R$ ${valorPorParcela.toFixed(2)} cada`);
    
    return {
      success: true,
      message: `Compra redividida em ${novoNumeroParcelas} parcelas de R$ ${valorPorParcela.toFixed(2)}`,
      valorPorParcela: valorPorParcela
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao redividir parcelas:', error);
    return { success: false, error: error.message };
  }
}

// ===== FUN√á√ïES AUXILIARES =====

function formatDateSafe(date) {
  if (!date) return '';
  try {
    const d = new Date(date);
    return d.toISOString().split('T')[0];
  } catch (e) {
    return '';
  }
}

function generateId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}
